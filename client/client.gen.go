// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
	BearerScopes  = "bearer.Scopes"
	CookieScopes  = "cookie.Scopes"
)

// Defines values for ActivityResponseDtoType.
const (
	ActivityResponseDtoTypeComment ActivityResponseDtoType = "comment"
	ActivityResponseDtoTypeLike    ActivityResponseDtoType = "like"
)

// Defines values for AlbumUserRole.
const (
	Editor AlbumUserRole = "editor"
	Viewer AlbumUserRole = "viewer"
)

// Defines values for AssetBulkUploadCheckResultAction.
const (
	Accept AssetBulkUploadCheckResultAction = "accept"
	Reject AssetBulkUploadCheckResultAction = "reject"
)

// Defines values for AssetBulkUploadCheckResultReason.
const (
	AssetBulkUploadCheckResultReasonDuplicate         AssetBulkUploadCheckResultReason = "duplicate"
	AssetBulkUploadCheckResultReasonUnsupportedFormat AssetBulkUploadCheckResultReason = "unsupported-format"
)

// Defines values for AssetIdsResponseDtoError.
const (
	AssetIdsResponseDtoErrorDuplicate    AssetIdsResponseDtoError = "duplicate"
	AssetIdsResponseDtoErrorNoPermission AssetIdsResponseDtoError = "no_permission"
	AssetIdsResponseDtoErrorNotFound     AssetIdsResponseDtoError = "not_found"
)

// Defines values for AssetJobName.
const (
	RefreshMetadata     AssetJobName = "refresh-metadata"
	RegenerateThumbnail AssetJobName = "regenerate-thumbnail"
	TranscodeVideo      AssetJobName = "transcode-video"
)

// Defines values for AssetOrder.
const (
	Asc  AssetOrder = "asc"
	Desc AssetOrder = "desc"
)

// Defines values for AssetTypeEnum.
const (
	AUDIO AssetTypeEnum = "AUDIO"
	IMAGE AssetTypeEnum = "IMAGE"
	OTHER AssetTypeEnum = "OTHER"
	VIDEO AssetTypeEnum = "VIDEO"
)

// Defines values for AudioCodec.
const (
	Aac     AudioCodec = "aac"
	Libopus AudioCodec = "libopus"
	Mp3     AudioCodec = "mp3"
)

// Defines values for BulkIdResponseDtoError.
const (
	Duplicate    BulkIdResponseDtoError = "duplicate"
	NoPermission BulkIdResponseDtoError = "no_permission"
	NotFound     BulkIdResponseDtoError = "not_found"
	Unknown      BulkIdResponseDtoError = "unknown"
)

// Defines values for CLIPMode.
const (
	Text   CLIPMode = "text"
	Vision CLIPMode = "vision"
)

// Defines values for CQMode.
const (
	Auto CQMode = "auto"
	Cqp  CQMode = "cqp"
	Icq  CQMode = "icq"
)

// Defines values for Colorspace.
const (
	P3   Colorspace = "p3"
	Srgb Colorspace = "srgb"
)

// Defines values for EntityType.
const (
	EntityTypeALBUM EntityType = "ALBUM"
	EntityTypeASSET EntityType = "ASSET"
)

// Defines values for ImageFormat.
const (
	Jpeg ImageFormat = "jpeg"
	Webp ImageFormat = "webp"
)

// Defines values for JobCommand.
const (
	ClearFailed JobCommand = "clear-failed"
	Empty       JobCommand = "empty"
	Pause       JobCommand = "pause"
	Resume      JobCommand = "resume"
	Start       JobCommand = "start"
)

// Defines values for JobName.
const (
	JobNameBackgroundTask           JobName = "backgroundTask"
	JobNameFaceDetection            JobName = "faceDetection"
	JobNameFacialRecognition        JobName = "facialRecognition"
	JobNameLibrary                  JobName = "library"
	JobNameMetadataExtraction       JobName = "metadataExtraction"
	JobNameMigration                JobName = "migration"
	JobNameNotifications            JobName = "notifications"
	JobNameSearch                   JobName = "search"
	JobNameSidecar                  JobName = "sidecar"
	JobNameSmartSearch              JobName = "smartSearch"
	JobNameStorageTemplateMigration JobName = "storageTemplateMigration"
	JobNameThumbnailGeneration      JobName = "thumbnailGeneration"
	JobNameVideoConversion          JobName = "videoConversion"
)

// Defines values for LibraryType.
const (
	EXTERNAL LibraryType = "EXTERNAL"
	UPLOAD   LibraryType = "UPLOAD"
)

// Defines values for LogLevel.
const (
	Debug   LogLevel = "debug"
	Error   LogLevel = "error"
	Fatal   LogLevel = "fatal"
	Log     LogLevel = "log"
	Verbose LogLevel = "verbose"
	Warn    LogLevel = "warn"
)

// Defines values for MapTheme.
const (
	Dark  MapTheme = "dark"
	Light MapTheme = "light"
)

// Defines values for MemoryResponseDtoType.
const (
	MemoryResponseDtoTypeOnThisDay MemoryResponseDtoType = "on_this_day"
)

// Defines values for MemoryType.
const (
	MemoryTypeOnThisDay MemoryType = "on_this_day"
)

// Defines values for ModelType.
const (
	ModelTypeClip              ModelType = "clip"
	ModelTypeFacialRecognition ModelType = "facial-recognition"
)

// Defines values for PathEntityType.
const (
	PathEntityTypeAsset  PathEntityType = "asset"
	PathEntityTypePerson PathEntityType = "person"
	PathEntityTypeUser   PathEntityType = "user"
)

// Defines values for PathType.
const (
	EncodedVideo PathType = "encoded_video"
	Face         PathType = "face"
	Original     PathType = "original"
	Preview      PathType = "preview"
	Profile      PathType = "profile"
	Sidecar      PathType = "sidecar"
	Thumbnail    PathType = "thumbnail"
)

// Defines values for ReactionLevel.
const (
	ReactionLevelAlbum ReactionLevel = "album"
	ReactionLevelAsset ReactionLevel = "asset"
)

// Defines values for ReactionType.
const (
	ReactionTypeComment ReactionType = "comment"
	ReactionTypeLike    ReactionType = "like"
)

// Defines values for SearchSuggestionType.
const (
	CameraMake  SearchSuggestionType = "camera-make"
	CameraModel SearchSuggestionType = "camera-model"
	City        SearchSuggestionType = "city"
	Country     SearchSuggestionType = "country"
	State       SearchSuggestionType = "state"
)

// Defines values for SharedLinkType.
const (
	SharedLinkTypeALBUM      SharedLinkType = "ALBUM"
	SharedLinkTypeINDIVIDUAL SharedLinkType = "INDIVIDUAL"
)

// Defines values for TagTypeEnum.
const (
	CUSTOM TagTypeEnum = "CUSTOM"
	FACE   TagTypeEnum = "FACE"
	OBJECT TagTypeEnum = "OBJECT"
)

// Defines values for ThumbnailFormat.
const (
	JPEG ThumbnailFormat = "JPEG"
	WEBP ThumbnailFormat = "WEBP"
)

// Defines values for TimeBucketSize.
const (
	DAY   TimeBucketSize = "DAY"
	MONTH TimeBucketSize = "MONTH"
)

// Defines values for ToneMapping.
const (
	ToneMappingDisabled ToneMapping = "disabled"
	ToneMappingHable    ToneMapping = "hable"
	ToneMappingMobius   ToneMapping = "mobius"
	ToneMappingReinhard ToneMapping = "reinhard"
)

// Defines values for TranscodeHWAccel.
const (
	TranscodeHWAccelDisabled TranscodeHWAccel = "disabled"
	TranscodeHWAccelNvenc    TranscodeHWAccel = "nvenc"
	TranscodeHWAccelQsv      TranscodeHWAccel = "qsv"
	TranscodeHWAccelRkmpp    TranscodeHWAccel = "rkmpp"
	TranscodeHWAccelVaapi    TranscodeHWAccel = "vaapi"
)

// Defines values for TranscodePolicy.
const (
	All      TranscodePolicy = "all"
	Bitrate  TranscodePolicy = "bitrate"
	Disabled TranscodePolicy = "disabled"
	Optimal  TranscodePolicy = "optimal"
	Required TranscodePolicy = "required"
)

// Defines values for UserAvatarColor.
const (
	Amber   UserAvatarColor = "amber"
	Blue    UserAvatarColor = "blue"
	Gray    UserAvatarColor = "gray"
	Green   UserAvatarColor = "green"
	Orange  UserAvatarColor = "orange"
	Pink    UserAvatarColor = "pink"
	Primary UserAvatarColor = "primary"
	Purple  UserAvatarColor = "purple"
	Red     UserAvatarColor = "red"
	Yellow  UserAvatarColor = "yellow"
)

// Defines values for UserStatus.
const (
	Active   UserStatus = "active"
	Deleted  UserStatus = "deleted"
	Removing UserStatus = "removing"
)

// Defines values for VideoCodec.
const (
	Av1  VideoCodec = "av1"
	H264 VideoCodec = "h264"
	Hevc VideoCodec = "hevc"
	Vp9  VideoCodec = "vp9"
)

// Defines values for GetPartnersParamsDirection.
const (
	SharedBy   GetPartnersParamsDirection = "shared-by"
	SharedWith GetPartnersParamsDirection = "shared-with"
)

// APIKeyCreateDto defines model for APIKeyCreateDto.
type APIKeyCreateDto struct {
	Name *string `json:"name,omitempty"`
}

// APIKeyCreateResponseDto defines model for APIKeyCreateResponseDto.
type APIKeyCreateResponseDto struct {
	ApiKey APIKeyResponseDto `json:"apiKey"`
	Secret string            `json:"secret"`
}

// APIKeyResponseDto defines model for APIKeyResponseDto.
type APIKeyResponseDto struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// APIKeyUpdateDto defines model for APIKeyUpdateDto.
type APIKeyUpdateDto struct {
	Name string `json:"name"`
}

// ActivityCreateDto defines model for ActivityCreateDto.
type ActivityCreateDto struct {
	AlbumId openapi_types.UUID  `json:"albumId"`
	AssetId *openapi_types.UUID `json:"assetId,omitempty"`
	Comment *string             `json:"comment,omitempty"`
	Type    ReactionType        `json:"type"`
}

// ActivityResponseDto defines model for ActivityResponseDto.
type ActivityResponseDto struct {
	AssetId   *string                 `json:"assetId"`
	Comment   *string                 `json:"comment"`
	CreatedAt time.Time               `json:"createdAt"`
	Id        string                  `json:"id"`
	Type      ActivityResponseDtoType `json:"type"`
	User      UserDto                 `json:"user"`
}

// ActivityResponseDtoType defines model for ActivityResponseDto.Type.
type ActivityResponseDtoType string

// ActivityStatisticsResponseDto defines model for ActivityStatisticsResponseDto.
type ActivityStatisticsResponseDto struct {
	Comments int `json:"comments"`
}

// AddUsersDto defines model for AddUsersDto.
type AddUsersDto struct {
	AlbumUsers []AlbumUserAddDto `json:"albumUsers"`

	// SharedUserIds This property was deprecated in v1.102.0
	// Deprecated:
	SharedUserIds *[]openapi_types.UUID `json:"sharedUserIds,omitempty"`
}

// AdminOnboardingUpdateDto defines model for AdminOnboardingUpdateDto.
type AdminOnboardingUpdateDto struct {
	IsOnboarded bool `json:"isOnboarded"`
}

// AlbumCountResponseDto defines model for AlbumCountResponseDto.
type AlbumCountResponseDto struct {
	NotShared int `json:"notShared"`
	Owned     int `json:"owned"`
	Shared    int `json:"shared"`
}

// AlbumResponseDto defines model for AlbumResponseDto.
type AlbumResponseDto struct {
	AlbumName                  string                 `json:"albumName"`
	AlbumThumbnailAssetId      *string                `json:"albumThumbnailAssetId"`
	AlbumUsers                 []AlbumUserResponseDto `json:"albumUsers"`
	AssetCount                 int                    `json:"assetCount"`
	Assets                     []AssetResponseDto     `json:"assets"`
	CreatedAt                  time.Time              `json:"createdAt"`
	Description                string                 `json:"description"`
	EndDate                    *time.Time             `json:"endDate,omitempty"`
	HasSharedLink              bool                   `json:"hasSharedLink"`
	Id                         string                 `json:"id"`
	IsActivityEnabled          bool                   `json:"isActivityEnabled"`
	LastModifiedAssetTimestamp *time.Time             `json:"lastModifiedAssetTimestamp,omitempty"`
	Order                      *AssetOrder            `json:"order,omitempty"`
	Owner                      UserResponseDto        `json:"owner"`
	OwnerId                    string                 `json:"ownerId"`
	Shared                     bool                   `json:"shared"`

	// SharedUsers This property was deprecated in v1.102.0
	// Deprecated:
	SharedUsers []UserResponseDto `json:"sharedUsers"`
	StartDate   *time.Time        `json:"startDate,omitempty"`
	UpdatedAt   time.Time         `json:"updatedAt"`
}

// AlbumUserAddDto defines model for AlbumUserAddDto.
type AlbumUserAddDto struct {
	Role   *AlbumUserRole     `json:"role,omitempty"`
	UserId openapi_types.UUID `json:"userId"`
}

// AlbumUserResponseDto defines model for AlbumUserResponseDto.
type AlbumUserResponseDto struct {
	Role AlbumUserRole   `json:"role"`
	User UserResponseDto `json:"user"`
}

// AlbumUserRole defines model for AlbumUserRole.
type AlbumUserRole string

// AllJobStatusResponseDto defines model for AllJobStatusResponseDto.
type AllJobStatusResponseDto struct {
	BackgroundTask           JobStatusDto `json:"backgroundTask"`
	FaceDetection            JobStatusDto `json:"faceDetection"`
	FacialRecognition        JobStatusDto `json:"facialRecognition"`
	Library                  JobStatusDto `json:"library"`
	MetadataExtraction       JobStatusDto `json:"metadataExtraction"`
	Migration                JobStatusDto `json:"migration"`
	Notifications            JobStatusDto `json:"notifications"`
	Search                   JobStatusDto `json:"search"`
	Sidecar                  JobStatusDto `json:"sidecar"`
	SmartSearch              JobStatusDto `json:"smartSearch"`
	StorageTemplateMigration JobStatusDto `json:"storageTemplateMigration"`
	ThumbnailGeneration      JobStatusDto `json:"thumbnailGeneration"`
	VideoConversion          JobStatusDto `json:"videoConversion"`
}

// AssetBulkDeleteDto defines model for AssetBulkDeleteDto.
type AssetBulkDeleteDto struct {
	Force *bool                `json:"force,omitempty"`
	Ids   []openapi_types.UUID `json:"ids"`
}

// AssetBulkUpdateDto defines model for AssetBulkUpdateDto.
type AssetBulkUpdateDto struct {
	DateTimeOriginal *string              `json:"dateTimeOriginal,omitempty"`
	Ids              []openapi_types.UUID `json:"ids"`
	IsArchived       *bool                `json:"isArchived,omitempty"`
	IsFavorite       *bool                `json:"isFavorite,omitempty"`
	Latitude         *float32             `json:"latitude,omitempty"`
	Longitude        *float32             `json:"longitude,omitempty"`
	RemoveParent     *bool                `json:"removeParent,omitempty"`
	StackParentId    *openapi_types.UUID  `json:"stackParentId,omitempty"`
}

// AssetBulkUploadCheckDto defines model for AssetBulkUploadCheckDto.
type AssetBulkUploadCheckDto struct {
	Assets []AssetBulkUploadCheckItem `json:"assets"`
}

// AssetBulkUploadCheckItem defines model for AssetBulkUploadCheckItem.
type AssetBulkUploadCheckItem struct {
	// Checksum base64 or hex encoded sha1 hash
	Checksum string `json:"checksum"`
	Id       string `json:"id"`
}

// AssetBulkUploadCheckResponseDto defines model for AssetBulkUploadCheckResponseDto.
type AssetBulkUploadCheckResponseDto struct {
	Results []AssetBulkUploadCheckResult `json:"results"`
}

// AssetBulkUploadCheckResult defines model for AssetBulkUploadCheckResult.
type AssetBulkUploadCheckResult struct {
	Action  AssetBulkUploadCheckResultAction  `json:"action"`
	AssetId *string                           `json:"assetId,omitempty"`
	Id      string                            `json:"id"`
	Reason  *AssetBulkUploadCheckResultReason `json:"reason,omitempty"`
}

// AssetBulkUploadCheckResultAction defines model for AssetBulkUploadCheckResult.Action.
type AssetBulkUploadCheckResultAction string

// AssetBulkUploadCheckResultReason defines model for AssetBulkUploadCheckResult.Reason.
type AssetBulkUploadCheckResultReason string

// AssetDeltaSyncDto defines model for AssetDeltaSyncDto.
type AssetDeltaSyncDto struct {
	UpdatedAfter time.Time            `json:"updatedAfter"`
	UserIds      []openapi_types.UUID `json:"userIds"`
}

// AssetDeltaSyncResponseDto defines model for AssetDeltaSyncResponseDto.
type AssetDeltaSyncResponseDto struct {
	Deleted       []string           `json:"deleted"`
	NeedsFullSync bool               `json:"needsFullSync"`
	Upserted      []AssetResponseDto `json:"upserted"`
}

// AssetFaceResponseDto defines model for AssetFaceResponseDto.
type AssetFaceResponseDto struct {
	BoundingBoxX1 int                `json:"boundingBoxX1"`
	BoundingBoxX2 int                `json:"boundingBoxX2"`
	BoundingBoxY1 int                `json:"boundingBoxY1"`
	BoundingBoxY2 int                `json:"boundingBoxY2"`
	Id            openapi_types.UUID `json:"id"`
	ImageHeight   int                `json:"imageHeight"`
	ImageWidth    int                `json:"imageWidth"`
	Person        *PersonResponseDto `json:"person"`
}

// AssetFaceUpdateDto defines model for AssetFaceUpdateDto.
type AssetFaceUpdateDto struct {
	Data []AssetFaceUpdateItem `json:"data"`
}

// AssetFaceUpdateItem defines model for AssetFaceUpdateItem.
type AssetFaceUpdateItem struct {
	AssetId  openapi_types.UUID `json:"assetId"`
	PersonId openapi_types.UUID `json:"personId"`
}

// AssetFaceWithoutPersonResponseDto defines model for AssetFaceWithoutPersonResponseDto.
type AssetFaceWithoutPersonResponseDto struct {
	BoundingBoxX1 int                `json:"boundingBoxX1"`
	BoundingBoxX2 int                `json:"boundingBoxX2"`
	BoundingBoxY1 int                `json:"boundingBoxY1"`
	BoundingBoxY2 int                `json:"boundingBoxY2"`
	Id            openapi_types.UUID `json:"id"`
	ImageHeight   int                `json:"imageHeight"`
	ImageWidth    int                `json:"imageWidth"`
}

// AssetFileUploadResponseDto defines model for AssetFileUploadResponseDto.
type AssetFileUploadResponseDto struct {
	Duplicate bool   `json:"duplicate"`
	Id        string `json:"id"`
}

// AssetFullSyncDto defines model for AssetFullSyncDto.
type AssetFullSyncDto struct {
	LastCreationDate *time.Time          `json:"lastCreationDate,omitempty"`
	LastId           *openapi_types.UUID `json:"lastId,omitempty"`
	Limit            int                 `json:"limit"`
	UpdatedUntil     time.Time           `json:"updatedUntil"`
	UserId           *openapi_types.UUID `json:"userId,omitempty"`
}

// AssetIdsDto defines model for AssetIdsDto.
type AssetIdsDto struct {
	AssetIds []openapi_types.UUID `json:"assetIds"`
}

// AssetIdsResponseDto defines model for AssetIdsResponseDto.
type AssetIdsResponseDto struct {
	AssetId string                    `json:"assetId"`
	Error   *AssetIdsResponseDtoError `json:"error,omitempty"`
	Success bool                      `json:"success"`
}

// AssetIdsResponseDtoError defines model for AssetIdsResponseDto.Error.
type AssetIdsResponseDtoError string

// AssetJobName defines model for AssetJobName.
type AssetJobName string

// AssetJobsDto defines model for AssetJobsDto.
type AssetJobsDto struct {
	AssetIds []openapi_types.UUID `json:"assetIds"`
	Name     AssetJobName         `json:"name"`
}

// AssetOrder defines model for AssetOrder.
type AssetOrder string

// AssetResponseDto defines model for AssetResponseDto.
type AssetResponseDto struct {
	// Checksum base64 encoded sha1 hash
	Checksum         string                        `json:"checksum"`
	DeviceAssetId    string                        `json:"deviceAssetId"`
	DeviceId         string                        `json:"deviceId"`
	Duration         string                        `json:"duration"`
	ExifInfo         *ExifResponseDto              `json:"exifInfo,omitempty"`
	FileCreatedAt    time.Time                     `json:"fileCreatedAt"`
	FileModifiedAt   time.Time                     `json:"fileModifiedAt"`
	HasMetadata      bool                          `json:"hasMetadata"`
	Id               string                        `json:"id"`
	IsArchived       bool                          `json:"isArchived"`
	IsExternal       bool                          `json:"isExternal"`
	IsFavorite       bool                          `json:"isFavorite"`
	IsOffline        bool                          `json:"isOffline"`
	IsReadOnly       bool                          `json:"isReadOnly"`
	IsTrashed        bool                          `json:"isTrashed"`
	LibraryId        string                        `json:"libraryId"`
	LivePhotoVideoId *string                       `json:"livePhotoVideoId"`
	LocalDateTime    time.Time                     `json:"localDateTime"`
	OriginalFileName string                        `json:"originalFileName"`
	OriginalPath     string                        `json:"originalPath"`
	Owner            *UserResponseDto              `json:"owner,omitempty"`
	OwnerId          string                        `json:"ownerId"`
	People           *[]PersonWithFacesResponseDto `json:"people,omitempty"`
	Resized          bool                          `json:"resized"`
	SmartInfo        *SmartInfoResponseDto         `json:"smartInfo,omitempty"`
	Stack            *[]AssetResponseDto           `json:"stack,omitempty"`
	StackCount       *int                          `json:"stackCount"`
	StackParentId    *string                       `json:"stackParentId"`
	Tags             *[]TagResponseDto             `json:"tags,omitempty"`
	Thumbhash        *string                       `json:"thumbhash"`
	Type             AssetTypeEnum                 `json:"type"`
	UpdatedAt        time.Time                     `json:"updatedAt"`
}

// AssetStatsResponseDto defines model for AssetStatsResponseDto.
type AssetStatsResponseDto struct {
	Images int `json:"images"`
	Total  int `json:"total"`
	Videos int `json:"videos"`
}

// AssetTypeEnum defines model for AssetTypeEnum.
type AssetTypeEnum string

// AudioCodec defines model for AudioCodec.
type AudioCodec string

// AuditDeletesResponseDto defines model for AuditDeletesResponseDto.
type AuditDeletesResponseDto struct {
	Ids           []string `json:"ids"`
	NeedsFullSync bool     `json:"needsFullSync"`
}

// BulkIdResponseDto defines model for BulkIdResponseDto.
type BulkIdResponseDto struct {
	Error   *BulkIdResponseDtoError `json:"error,omitempty"`
	Id      string                  `json:"id"`
	Success bool                    `json:"success"`
}

// BulkIdResponseDtoError defines model for BulkIdResponseDto.Error.
type BulkIdResponseDtoError string

// BulkIdsDto defines model for BulkIdsDto.
type BulkIdsDto struct {
	Ids []openapi_types.UUID `json:"ids"`
}

// CLIPConfig defines model for CLIPConfig.
type CLIPConfig struct {
	Enabled   bool       `json:"enabled"`
	Mode      *CLIPMode  `json:"mode,omitempty"`
	ModelName string     `json:"modelName"`
	ModelType *ModelType `json:"modelType,omitempty"`
}

// CLIPMode defines model for CLIPMode.
type CLIPMode string

// CQMode defines model for CQMode.
type CQMode string

// ChangePasswordDto defines model for ChangePasswordDto.
type ChangePasswordDto struct {
	NewPassword string `json:"newPassword"`
	Password    string `json:"password"`
}

// CheckExistingAssetsDto defines model for CheckExistingAssetsDto.
type CheckExistingAssetsDto struct {
	DeviceAssetIds []string `json:"deviceAssetIds"`
	DeviceId       string   `json:"deviceId"`
}

// CheckExistingAssetsResponseDto defines model for CheckExistingAssetsResponseDto.
type CheckExistingAssetsResponseDto struct {
	ExistingIds []string `json:"existingIds"`
}

// Colorspace defines model for Colorspace.
type Colorspace string

// CreateAlbumDto defines model for CreateAlbumDto.
type CreateAlbumDto struct {
	AlbumName         string                `json:"albumName"`
	AssetIds          *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Description       *string               `json:"description,omitempty"`
	SharedWithUserIds *[]openapi_types.UUID `json:"sharedWithUserIds,omitempty"`
}

// CreateAssetDto defines model for CreateAssetDto.
type CreateAssetDto struct {
	AssetData      openapi_types.File  `json:"assetData"`
	DeviceAssetId  string              `json:"deviceAssetId"`
	DeviceId       string              `json:"deviceId"`
	Duration       *string             `json:"duration,omitempty"`
	FileCreatedAt  time.Time           `json:"fileCreatedAt"`
	FileModifiedAt time.Time           `json:"fileModifiedAt"`
	IsArchived     *bool               `json:"isArchived,omitempty"`
	IsFavorite     *bool               `json:"isFavorite,omitempty"`
	IsOffline      *bool               `json:"isOffline,omitempty"`
	IsReadOnly     *bool               `json:"isReadOnly,omitempty"`
	IsVisible      *bool               `json:"isVisible,omitempty"`
	LibraryId      *openapi_types.UUID `json:"libraryId,omitempty"`
	LivePhotoData  *openapi_types.File `json:"livePhotoData,omitempty"`
	SidecarData    *openapi_types.File `json:"sidecarData,omitempty"`
}

// CreateLibraryDto defines model for CreateLibraryDto.
type CreateLibraryDto struct {
	ExclusionPatterns *[]string          `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string          `json:"importPaths,omitempty"`
	IsVisible         *bool              `json:"isVisible,omitempty"`
	Name              *string            `json:"name,omitempty"`
	OwnerId           openapi_types.UUID `json:"ownerId"`
	Type              LibraryType        `json:"type"`
}

// CreateProfileImageDto defines model for CreateProfileImageDto.
type CreateProfileImageDto struct {
	File openapi_types.File `json:"file"`
}

// CreateProfileImageResponseDto defines model for CreateProfileImageResponseDto.
type CreateProfileImageResponseDto struct {
	ProfileImagePath string `json:"profileImagePath"`
	UserId           string `json:"userId"`
}

// CreateTagDto defines model for CreateTagDto.
type CreateTagDto struct {
	Name string      `json:"name"`
	Type TagTypeEnum `json:"type"`
}

// CreateUserDto defines model for CreateUserDto.
type CreateUserDto struct {
	Email                string  `json:"email"`
	MemoriesEnabled      *bool   `json:"memoriesEnabled,omitempty"`
	Name                 string  `json:"name"`
	Notify               *bool   `json:"notify,omitempty"`
	Password             string  `json:"password"`
	QuotaSizeInBytes     *int64  `json:"quotaSizeInBytes"`
	ShouldChangePassword *bool   `json:"shouldChangePassword,omitempty"`
	StorageLabel         *string `json:"storageLabel"`
}

// DeleteUserDto defines model for DeleteUserDto.
type DeleteUserDto struct {
	Force *bool `json:"force,omitempty"`
}

// DownloadArchiveInfo defines model for DownloadArchiveInfo.
type DownloadArchiveInfo struct {
	AssetIds []string `json:"assetIds"`
	Size     int      `json:"size"`
}

// DownloadInfoDto defines model for DownloadInfoDto.
type DownloadInfoDto struct {
	AlbumId     *openapi_types.UUID   `json:"albumId,omitempty"`
	ArchiveSize *int                  `json:"archiveSize,omitempty"`
	AssetIds    *[]openapi_types.UUID `json:"assetIds,omitempty"`
	UserId      *openapi_types.UUID   `json:"userId,omitempty"`
}

// DownloadResponseDto defines model for DownloadResponseDto.
type DownloadResponseDto struct {
	Archives  []DownloadArchiveInfo `json:"archives"`
	TotalSize int                   `json:"totalSize"`
}

// EntityType defines model for EntityType.
type EntityType string

// ExifResponseDto defines model for ExifResponseDto.
type ExifResponseDto struct {
	City             *string    `json:"city"`
	Country          *string    `json:"country"`
	DateTimeOriginal *time.Time `json:"dateTimeOriginal"`
	Description      *string    `json:"description"`
	ExifImageHeight  *float32   `json:"exifImageHeight"`
	ExifImageWidth   *float32   `json:"exifImageWidth"`
	ExposureTime     *string    `json:"exposureTime"`
	FNumber          *float32   `json:"fNumber"`
	FileSizeInByte   *int64     `json:"fileSizeInByte"`
	FocalLength      *float32   `json:"focalLength"`
	Iso              *float32   `json:"iso"`
	Latitude         *float32   `json:"latitude"`
	LensModel        *string    `json:"lensModel"`
	Longitude        *float32   `json:"longitude"`
	Make             *string    `json:"make"`
	Model            *string    `json:"model"`
	ModifyDate       *time.Time `json:"modifyDate"`
	Orientation      *string    `json:"orientation"`
	ProjectionType   *string    `json:"projectionType"`
	State            *string    `json:"state"`
	TimeZone         *string    `json:"timeZone"`
}

// FaceDto defines model for FaceDto.
type FaceDto struct {
	Id openapi_types.UUID `json:"id"`
}

// FileChecksumDto defines model for FileChecksumDto.
type FileChecksumDto struct {
	Filenames []string `json:"filenames"`
}

// FileChecksumResponseDto defines model for FileChecksumResponseDto.
type FileChecksumResponseDto struct {
	Checksum string `json:"checksum"`
	Filename string `json:"filename"`
}

// FileReportDto defines model for FileReportDto.
type FileReportDto struct {
	Extras  []string            `json:"extras"`
	Orphans []FileReportItemDto `json:"orphans"`
}

// FileReportFixDto defines model for FileReportFixDto.
type FileReportFixDto struct {
	Items []FileReportItemDto `json:"items"`
}

// FileReportItemDto defines model for FileReportItemDto.
type FileReportItemDto struct {
	Checksum   *string            `json:"checksum,omitempty"`
	EntityId   openapi_types.UUID `json:"entityId"`
	EntityType PathEntityType     `json:"entityType"`
	PathType   PathType           `json:"pathType"`
	PathValue  string             `json:"pathValue"`
}

// ImageFormat defines model for ImageFormat.
type ImageFormat string

// JobCommand defines model for JobCommand.
type JobCommand string

// JobCommandDto defines model for JobCommandDto.
type JobCommandDto struct {
	Command JobCommand `json:"command"`
	Force   bool       `json:"force"`
}

// JobCountsDto defines model for JobCountsDto.
type JobCountsDto struct {
	Active    int `json:"active"`
	Completed int `json:"completed"`
	Delayed   int `json:"delayed"`
	Failed    int `json:"failed"`
	Paused    int `json:"paused"`
	Waiting   int `json:"waiting"`
}

// JobName defines model for JobName.
type JobName string

// JobSettingsDto defines model for JobSettingsDto.
type JobSettingsDto struct {
	Concurrency int `json:"concurrency"`
}

// JobStatusDto defines model for JobStatusDto.
type JobStatusDto struct {
	JobCounts   JobCountsDto   `json:"jobCounts"`
	QueueStatus QueueStatusDto `json:"queueStatus"`
}

// LibraryResponseDto defines model for LibraryResponseDto.
type LibraryResponseDto struct {
	AssetCount        int         `json:"assetCount"`
	CreatedAt         time.Time   `json:"createdAt"`
	ExclusionPatterns []string    `json:"exclusionPatterns"`
	Id                string      `json:"id"`
	ImportPaths       []string    `json:"importPaths"`
	Name              string      `json:"name"`
	OwnerId           string      `json:"ownerId"`
	RefreshedAt       *time.Time  `json:"refreshedAt"`
	Type              LibraryType `json:"type"`
	UpdatedAt         time.Time   `json:"updatedAt"`
}

// LibraryStatsResponseDto defines model for LibraryStatsResponseDto.
type LibraryStatsResponseDto struct {
	Photos int   `json:"photos"`
	Total  int   `json:"total"`
	Usage  int64 `json:"usage"`
	Videos int   `json:"videos"`
}

// LibraryType defines model for LibraryType.
type LibraryType string

// LogLevel defines model for LogLevel.
type LogLevel string

// LoginCredentialDto defines model for LoginCredentialDto.
type LoginCredentialDto struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponseDto defines model for LoginResponseDto.
type LoginResponseDto struct {
	AccessToken          string `json:"accessToken"`
	IsAdmin              bool   `json:"isAdmin"`
	Name                 string `json:"name"`
	ProfileImagePath     string `json:"profileImagePath"`
	ShouldChangePassword bool   `json:"shouldChangePassword"`
	UserEmail            string `json:"userEmail"`
	UserId               string `json:"userId"`
}

// LogoutResponseDto defines model for LogoutResponseDto.
type LogoutResponseDto struct {
	RedirectUri string `json:"redirectUri"`
	Successful  bool   `json:"successful"`
}

// MapMarkerResponseDto defines model for MapMarkerResponseDto.
type MapMarkerResponseDto struct {
	City    *string `json:"city"`
	Country *string `json:"country"`
	Id      string  `json:"id"`
	Lat     float64 `json:"lat"`
	Lon     float64 `json:"lon"`
	State   *string `json:"state"`
}

// MapTheme defines model for MapTheme.
type MapTheme string

// MemoryCreateDto defines model for MemoryCreateDto.
type MemoryCreateDto struct {
	AssetIds *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Data     OnThisDayDto          `json:"data"`
	IsSaved  *bool                 `json:"isSaved,omitempty"`
	MemoryAt time.Time             `json:"memoryAt"`
	SeenAt   *time.Time            `json:"seenAt,omitempty"`
	Type     MemoryType            `json:"type"`
}

// MemoryLaneResponseDto defines model for MemoryLaneResponseDto.
type MemoryLaneResponseDto struct {
	Assets []AssetResponseDto `json:"assets"`

	// Title This property was deprecated in v1.100.0
	// Deprecated:
	Title    string `json:"title"`
	YearsAgo int    `json:"yearsAgo"`
}

// MemoryResponseDto defines model for MemoryResponseDto.
type MemoryResponseDto struct {
	Assets    []AssetResponseDto    `json:"assets"`
	CreatedAt time.Time             `json:"createdAt"`
	Data      OnThisDayDto          `json:"data"`
	DeletedAt *time.Time            `json:"deletedAt,omitempty"`
	Id        string                `json:"id"`
	IsSaved   bool                  `json:"isSaved"`
	MemoryAt  time.Time             `json:"memoryAt"`
	OwnerId   string                `json:"ownerId"`
	SeenAt    *time.Time            `json:"seenAt,omitempty"`
	Type      MemoryResponseDtoType `json:"type"`
	UpdatedAt time.Time             `json:"updatedAt"`
}

// MemoryResponseDtoType defines model for MemoryResponseDto.Type.
type MemoryResponseDtoType string

// MemoryType defines model for MemoryType.
type MemoryType string

// MemoryUpdateDto defines model for MemoryUpdateDto.
type MemoryUpdateDto struct {
	IsSaved  *bool      `json:"isSaved,omitempty"`
	MemoryAt *time.Time `json:"memoryAt,omitempty"`
	SeenAt   *time.Time `json:"seenAt,omitempty"`
}

// MergePersonDto defines model for MergePersonDto.
type MergePersonDto struct {
	Ids []openapi_types.UUID `json:"ids"`
}

// MetadataSearchDto defines model for MetadataSearchDto.
type MetadataSearchDto struct {
	Checksum         *string               `json:"checksum,omitempty"`
	City             *string               `json:"city,omitempty"`
	Country          *string               `json:"country,omitempty"`
	CreatedAfter     *time.Time            `json:"createdAfter,omitempty"`
	CreatedBefore    *time.Time            `json:"createdBefore,omitempty"`
	DeviceAssetId    *string               `json:"deviceAssetId,omitempty"`
	DeviceId         *string               `json:"deviceId,omitempty"`
	EncodedVideoPath *string               `json:"encodedVideoPath,omitempty"`
	Id               *openapi_types.UUID   `json:"id,omitempty"`
	IsArchived       *bool                 `json:"isArchived,omitempty"`
	IsEncoded        *bool                 `json:"isEncoded,omitempty"`
	IsExternal       *bool                 `json:"isExternal,omitempty"`
	IsFavorite       *bool                 `json:"isFavorite,omitempty"`
	IsMotion         *bool                 `json:"isMotion,omitempty"`
	IsNotInAlbum     *bool                 `json:"isNotInAlbum,omitempty"`
	IsOffline        *bool                 `json:"isOffline,omitempty"`
	IsReadOnly       *bool                 `json:"isReadOnly,omitempty"`
	IsVisible        *bool                 `json:"isVisible,omitempty"`
	LensModel        *string               `json:"lensModel,omitempty"`
	LibraryId        *openapi_types.UUID   `json:"libraryId,omitempty"`
	Make             *string               `json:"make,omitempty"`
	Model            *string               `json:"model,omitempty"`
	Order            *AssetOrder           `json:"order,omitempty"`
	OriginalFileName *string               `json:"originalFileName,omitempty"`
	OriginalPath     *string               `json:"originalPath,omitempty"`
	Page             *float32              `json:"page,omitempty"`
	PersonIds        *[]openapi_types.UUID `json:"personIds,omitempty"`
	PreviewPath      *string               `json:"previewPath,omitempty"`

	// ResizePath This property was deprecated in v1.100.0
	// Deprecated:
	ResizePath    *string        `json:"resizePath,omitempty"`
	Size          *float32       `json:"size,omitempty"`
	State         *string        `json:"state,omitempty"`
	TakenAfter    *time.Time     `json:"takenAfter,omitempty"`
	TakenBefore   *time.Time     `json:"takenBefore,omitempty"`
	ThumbnailPath *string        `json:"thumbnailPath,omitempty"`
	TrashedAfter  *time.Time     `json:"trashedAfter,omitempty"`
	TrashedBefore *time.Time     `json:"trashedBefore,omitempty"`
	Type          *AssetTypeEnum `json:"type,omitempty"`
	UpdatedAfter  *time.Time     `json:"updatedAfter,omitempty"`
	UpdatedBefore *time.Time     `json:"updatedBefore,omitempty"`

	// WebpPath This property was deprecated in v1.100.0
	// Deprecated:
	WebpPath     *string `json:"webpPath,omitempty"`
	WithArchived *bool   `json:"withArchived,omitempty"`
	WithDeleted  *bool   `json:"withDeleted,omitempty"`
	WithExif     *bool   `json:"withExif,omitempty"`
	WithPeople   *bool   `json:"withPeople,omitempty"`
	WithStacked  *bool   `json:"withStacked,omitempty"`
}

// ModelType defines model for ModelType.
type ModelType string

// OAuthAuthorizeResponseDto defines model for OAuthAuthorizeResponseDto.
type OAuthAuthorizeResponseDto struct {
	Url string `json:"url"`
}

// OAuthCallbackDto defines model for OAuthCallbackDto.
type OAuthCallbackDto struct {
	Url string `json:"url"`
}

// OAuthConfigDto defines model for OAuthConfigDto.
type OAuthConfigDto struct {
	RedirectUri string `json:"redirectUri"`
}

// OnThisDayDto defines model for OnThisDayDto.
type OnThisDayDto struct {
	Year float32 `json:"year"`
}

// PartnerResponseDto defines model for PartnerResponseDto.
type PartnerResponseDto struct {
	AvatarColor          UserAvatarColor `json:"avatarColor"`
	CreatedAt            time.Time       `json:"createdAt"`
	DeletedAt            *time.Time      `json:"deletedAt"`
	Email                string          `json:"email"`
	Id                   string          `json:"id"`
	InTimeline           *bool           `json:"inTimeline,omitempty"`
	IsAdmin              bool            `json:"isAdmin"`
	MemoriesEnabled      *bool           `json:"memoriesEnabled,omitempty"`
	Name                 string          `json:"name"`
	OauthId              string          `json:"oauthId"`
	ProfileImagePath     string          `json:"profileImagePath"`
	QuotaSizeInBytes     *int64          `json:"quotaSizeInBytes"`
	QuotaUsageInBytes    *int64          `json:"quotaUsageInBytes"`
	ShouldChangePassword bool            `json:"shouldChangePassword"`
	Status               UserStatus      `json:"status"`
	StorageLabel         *string         `json:"storageLabel"`
	UpdatedAt            time.Time       `json:"updatedAt"`
}

// PathEntityType defines model for PathEntityType.
type PathEntityType string

// PathType defines model for PathType.
type PathType string

// PeopleResponseDto defines model for PeopleResponseDto.
type PeopleResponseDto struct {
	Hidden int                 `json:"hidden"`
	People []PersonResponseDto `json:"people"`
	Total  int                 `json:"total"`
}

// PeopleUpdateDto defines model for PeopleUpdateDto.
type PeopleUpdateDto struct {
	People []PeopleUpdateItem `json:"people"`
}

// PeopleUpdateItem defines model for PeopleUpdateItem.
type PeopleUpdateItem struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate *openapi_types.Date `json:"birthDate"`

	// FeatureFaceAssetId Asset is used to get the feature face thumbnail.
	FeatureFaceAssetId *string `json:"featureFaceAssetId,omitempty"`

	// Id Person id.
	Id string `json:"id"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// PersonCreateDto defines model for PersonCreateDto.
type PersonCreateDto struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate *openapi_types.Date `json:"birthDate"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// PersonResponseDto defines model for PersonResponseDto.
type PersonResponseDto struct {
	BirthDate     *openapi_types.Date `json:"birthDate"`
	Id            string              `json:"id"`
	IsHidden      bool                `json:"isHidden"`
	Name          string              `json:"name"`
	ThumbnailPath string              `json:"thumbnailPath"`
}

// PersonStatisticsResponseDto defines model for PersonStatisticsResponseDto.
type PersonStatisticsResponseDto struct {
	Assets int `json:"assets"`
}

// PersonUpdateDto defines model for PersonUpdateDto.
type PersonUpdateDto struct {
	// BirthDate Person date of birth.
	// Note: the mobile app cannot currently set the birth date to null.
	BirthDate *openapi_types.Date `json:"birthDate"`

	// FeatureFaceAssetId Asset is used to get the feature face thumbnail.
	FeatureFaceAssetId *string `json:"featureFaceAssetId,omitempty"`

	// IsHidden Person visibility
	IsHidden *bool `json:"isHidden,omitempty"`

	// Name Person name.
	Name *string `json:"name,omitempty"`
}

// PersonWithFacesResponseDto defines model for PersonWithFacesResponseDto.
type PersonWithFacesResponseDto struct {
	BirthDate     *openapi_types.Date                 `json:"birthDate"`
	Faces         []AssetFaceWithoutPersonResponseDto `json:"faces"`
	Id            string                              `json:"id"`
	IsHidden      bool                                `json:"isHidden"`
	Name          string                              `json:"name"`
	ThumbnailPath string                              `json:"thumbnailPath"`
}

// PlacesResponseDto defines model for PlacesResponseDto.
type PlacesResponseDto struct {
	Admin1name *string `json:"admin1name,omitempty"`
	Admin2name *string `json:"admin2name,omitempty"`
	Latitude   float32 `json:"latitude"`
	Longitude  float32 `json:"longitude"`
	Name       string  `json:"name"`
}

// QueueStatusDto defines model for QueueStatusDto.
type QueueStatusDto struct {
	IsActive bool `json:"isActive"`
	IsPaused bool `json:"isPaused"`
}

// ReactionLevel defines model for ReactionLevel.
type ReactionLevel string

// ReactionType defines model for ReactionType.
type ReactionType string

// RecognitionConfig defines model for RecognitionConfig.
type RecognitionConfig struct {
	Enabled     bool       `json:"enabled"`
	MaxDistance float32    `json:"maxDistance"`
	MinFaces    int        `json:"minFaces"`
	MinScore    float32    `json:"minScore"`
	ModelName   string     `json:"modelName"`
	ModelType   *ModelType `json:"modelType,omitempty"`
}

// ReverseGeocodingStateResponseDto defines model for ReverseGeocodingStateResponseDto.
type ReverseGeocodingStateResponseDto struct {
	LastImportFileName *string `json:"lastImportFileName"`
	LastUpdate         *string `json:"lastUpdate"`
}

// ScanLibraryDto defines model for ScanLibraryDto.
type ScanLibraryDto struct {
	RefreshAllFiles      *bool `json:"refreshAllFiles,omitempty"`
	RefreshModifiedFiles *bool `json:"refreshModifiedFiles,omitempty"`
}

// SearchAlbumResponseDto defines model for SearchAlbumResponseDto.
type SearchAlbumResponseDto struct {
	Count  int                      `json:"count"`
	Facets []SearchFacetResponseDto `json:"facets"`
	Items  []AlbumResponseDto       `json:"items"`
	Total  int                      `json:"total"`
}

// SearchAssetResponseDto defines model for SearchAssetResponseDto.
type SearchAssetResponseDto struct {
	Count    int                      `json:"count"`
	Facets   []SearchFacetResponseDto `json:"facets"`
	Items    []AssetResponseDto       `json:"items"`
	NextPage *string                  `json:"nextPage"`
	Total    int                      `json:"total"`
}

// SearchExploreItem defines model for SearchExploreItem.
type SearchExploreItem struct {
	Data  AssetResponseDto `json:"data"`
	Value string           `json:"value"`
}

// SearchExploreResponseDto defines model for SearchExploreResponseDto.
type SearchExploreResponseDto struct {
	FieldName string              `json:"fieldName"`
	Items     []SearchExploreItem `json:"items"`
}

// SearchFacetCountResponseDto defines model for SearchFacetCountResponseDto.
type SearchFacetCountResponseDto struct {
	Count int    `json:"count"`
	Value string `json:"value"`
}

// SearchFacetResponseDto defines model for SearchFacetResponseDto.
type SearchFacetResponseDto struct {
	Counts    []SearchFacetCountResponseDto `json:"counts"`
	FieldName string                        `json:"fieldName"`
}

// SearchResponseDto defines model for SearchResponseDto.
type SearchResponseDto struct {
	Albums SearchAlbumResponseDto `json:"albums"`
	Assets SearchAssetResponseDto `json:"assets"`
}

// SearchSuggestionType defines model for SearchSuggestionType.
type SearchSuggestionType string

// ServerConfigDto defines model for ServerConfigDto.
type ServerConfigDto struct {
	ExternalDomain   string `json:"externalDomain"`
	IsInitialized    bool   `json:"isInitialized"`
	IsOnboarded      bool   `json:"isOnboarded"`
	LoginPageMessage string `json:"loginPageMessage"`
	OauthButtonText  string `json:"oauthButtonText"`
	TrashDays        int    `json:"trashDays"`
	UserDeleteDelay  int    `json:"userDeleteDelay"`
}

// ServerFeaturesDto defines model for ServerFeaturesDto.
type ServerFeaturesDto struct {
	ConfigFile        bool `json:"configFile"`
	Email             bool `json:"email"`
	FacialRecognition bool `json:"facialRecognition"`
	Map               bool `json:"map"`
	Oauth             bool `json:"oauth"`
	OauthAutoLaunch   bool `json:"oauthAutoLaunch"`
	PasswordLogin     bool `json:"passwordLogin"`
	ReverseGeocoding  bool `json:"reverseGeocoding"`
	Search            bool `json:"search"`
	Sidecar           bool `json:"sidecar"`
	SmartSearch       bool `json:"smartSearch"`
	Trash             bool `json:"trash"`
}

// ServerInfoResponseDto defines model for ServerInfoResponseDto.
type ServerInfoResponseDto struct {
	DiskAvailable       string  `json:"diskAvailable"`
	DiskAvailableRaw    int64   `json:"diskAvailableRaw"`
	DiskSize            string  `json:"diskSize"`
	DiskSizeRaw         int64   `json:"diskSizeRaw"`
	DiskUsagePercentage float32 `json:"diskUsagePercentage"`
	DiskUse             string  `json:"diskUse"`
	DiskUseRaw          int64   `json:"diskUseRaw"`
}

// ServerMediaTypesResponseDto defines model for ServerMediaTypesResponseDto.
type ServerMediaTypesResponseDto struct {
	Image   []string `json:"image"`
	Sidecar []string `json:"sidecar"`
	Video   []string `json:"video"`
}

// ServerPingResponse defines model for ServerPingResponse.
type ServerPingResponse struct {
	Res *string `json:"res,omitempty"`
}

// ServerStatsResponseDto defines model for ServerStatsResponseDto.
type ServerStatsResponseDto struct {
	Photos      int              `json:"photos"`
	Usage       int64            `json:"usage"`
	UsageByUser []UsageByUserDto `json:"usageByUser"`
	Videos      int              `json:"videos"`
}

// ServerThemeDto defines model for ServerThemeDto.
type ServerThemeDto struct {
	CustomCss string `json:"customCss"`
}

// ServerVersionResponseDto defines model for ServerVersionResponseDto.
type ServerVersionResponseDto struct {
	Major int `json:"major"`
	Minor int `json:"minor"`
	Patch int `json:"patch"`
}

// SessionResponseDto defines model for SessionResponseDto.
type SessionResponseDto struct {
	CreatedAt  string `json:"createdAt"`
	Current    bool   `json:"current"`
	DeviceOS   string `json:"deviceOS"`
	DeviceType string `json:"deviceType"`
	Id         string `json:"id"`
	UpdatedAt  string `json:"updatedAt"`
}

// SharedLinkCreateDto defines model for SharedLinkCreateDto.
type SharedLinkCreateDto struct {
	AlbumId       *openapi_types.UUID   `json:"albumId,omitempty"`
	AllowDownload *bool                 `json:"allowDownload,omitempty"`
	AllowUpload   *bool                 `json:"allowUpload,omitempty"`
	AssetIds      *[]openapi_types.UUID `json:"assetIds,omitempty"`
	Description   *string               `json:"description,omitempty"`
	ExpiresAt     *time.Time            `json:"expiresAt"`
	Password      *string               `json:"password,omitempty"`
	ShowMetadata  *bool                 `json:"showMetadata,omitempty"`
	Type          SharedLinkType        `json:"type"`
}

// SharedLinkEditDto defines model for SharedLinkEditDto.
type SharedLinkEditDto struct {
	AllowDownload *bool `json:"allowDownload,omitempty"`
	AllowUpload   *bool `json:"allowUpload,omitempty"`

	// ChangeExpiryTime Few clients cannot send null to set the expiryTime to never.
	// Setting this flag and not sending expiryAt is considered as null instead.
	// Clients that can send null values can ignore this.
	ChangeExpiryTime *bool      `json:"changeExpiryTime,omitempty"`
	Description      *string    `json:"description,omitempty"`
	ExpiresAt        *time.Time `json:"expiresAt"`
	Password         *string    `json:"password,omitempty"`
	ShowMetadata     *bool      `json:"showMetadata,omitempty"`
}

// SharedLinkResponseDto defines model for SharedLinkResponseDto.
type SharedLinkResponseDto struct {
	Album         *AlbumResponseDto  `json:"album,omitempty"`
	AllowDownload bool               `json:"allowDownload"`
	AllowUpload   bool               `json:"allowUpload"`
	Assets        []AssetResponseDto `json:"assets"`
	CreatedAt     time.Time          `json:"createdAt"`
	Description   *string            `json:"description"`
	ExpiresAt     *time.Time         `json:"expiresAt"`
	Id            string             `json:"id"`
	Key           string             `json:"key"`
	Password      *string            `json:"password"`
	ShowMetadata  bool               `json:"showMetadata"`
	Token         *string            `json:"token"`
	Type          SharedLinkType     `json:"type"`
	UserId        string             `json:"userId"`
}

// SharedLinkType defines model for SharedLinkType.
type SharedLinkType string

// SignUpDto defines model for SignUpDto.
type SignUpDto struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// SmartInfoResponseDto defines model for SmartInfoResponseDto.
type SmartInfoResponseDto struct {
	Objects *[]string `json:"objects"`
	Tags    *[]string `json:"tags"`
}

// SmartSearchDto defines model for SmartSearchDto.
type SmartSearchDto struct {
	City          *string               `json:"city,omitempty"`
	Country       *string               `json:"country,omitempty"`
	CreatedAfter  *time.Time            `json:"createdAfter,omitempty"`
	CreatedBefore *time.Time            `json:"createdBefore,omitempty"`
	DeviceId      *string               `json:"deviceId,omitempty"`
	IsArchived    *bool                 `json:"isArchived,omitempty"`
	IsEncoded     *bool                 `json:"isEncoded,omitempty"`
	IsExternal    *bool                 `json:"isExternal,omitempty"`
	IsFavorite    *bool                 `json:"isFavorite,omitempty"`
	IsMotion      *bool                 `json:"isMotion,omitempty"`
	IsNotInAlbum  *bool                 `json:"isNotInAlbum,omitempty"`
	IsOffline     *bool                 `json:"isOffline,omitempty"`
	IsReadOnly    *bool                 `json:"isReadOnly,omitempty"`
	IsVisible     *bool                 `json:"isVisible,omitempty"`
	LensModel     *string               `json:"lensModel,omitempty"`
	LibraryId     *openapi_types.UUID   `json:"libraryId,omitempty"`
	Make          *string               `json:"make,omitempty"`
	Model         *string               `json:"model,omitempty"`
	Page          *float32              `json:"page,omitempty"`
	PersonIds     *[]openapi_types.UUID `json:"personIds,omitempty"`
	Query         string                `json:"query"`
	Size          *float32              `json:"size,omitempty"`
	State         *string               `json:"state,omitempty"`
	TakenAfter    *time.Time            `json:"takenAfter,omitempty"`
	TakenBefore   *time.Time            `json:"takenBefore,omitempty"`
	TrashedAfter  *time.Time            `json:"trashedAfter,omitempty"`
	TrashedBefore *time.Time            `json:"trashedBefore,omitempty"`
	Type          *AssetTypeEnum        `json:"type,omitempty"`
	UpdatedAfter  *time.Time            `json:"updatedAfter,omitempty"`
	UpdatedBefore *time.Time            `json:"updatedBefore,omitempty"`
	WithArchived  *bool                 `json:"withArchived,omitempty"`
	WithDeleted   *bool                 `json:"withDeleted,omitempty"`
	WithExif      *bool                 `json:"withExif,omitempty"`
}

// SystemConfigDto defines model for SystemConfigDto.
type SystemConfigDto struct {
	Ffmpeg           SystemConfigFFmpegDto           `json:"ffmpeg"`
	Image            SystemConfigImageDto            `json:"image"`
	Job              SystemConfigJobDto              `json:"job"`
	Library          SystemConfigLibraryDto          `json:"library"`
	Logging          SystemConfigLoggingDto          `json:"logging"`
	MachineLearning  SystemConfigMachineLearningDto  `json:"machineLearning"`
	Map              SystemConfigMapDto              `json:"map"`
	NewVersionCheck  SystemConfigNewVersionCheckDto  `json:"newVersionCheck"`
	Notifications    SystemConfigNotificationsDto    `json:"notifications"`
	Oauth            SystemConfigOAuthDto            `json:"oauth"`
	PasswordLogin    SystemConfigPasswordLoginDto    `json:"passwordLogin"`
	ReverseGeocoding SystemConfigReverseGeocodingDto `json:"reverseGeocoding"`
	Server           SystemConfigServerDto           `json:"server"`
	StorageTemplate  SystemConfigStorageTemplateDto  `json:"storageTemplate"`
	Theme            SystemConfigThemeDto            `json:"theme"`
	Trash            SystemConfigTrashDto            `json:"trash"`
	User             SystemConfigUserDto             `json:"user"`
}

// SystemConfigFFmpegDto defines model for SystemConfigFFmpegDto.
type SystemConfigFFmpegDto struct {
	Accel               TranscodeHWAccel `json:"accel"`
	AcceptedAudioCodecs []AudioCodec     `json:"acceptedAudioCodecs"`
	AcceptedVideoCodecs []VideoCodec     `json:"acceptedVideoCodecs"`
	Bframes             int              `json:"bframes"`
	CqMode              CQMode           `json:"cqMode"`
	Crf                 int              `json:"crf"`
	GopSize             int              `json:"gopSize"`
	MaxBitrate          string           `json:"maxBitrate"`
	Npl                 int              `json:"npl"`
	PreferredHwDevice   string           `json:"preferredHwDevice"`
	Preset              string           `json:"preset"`
	Refs                int              `json:"refs"`
	TargetAudioCodec    AudioCodec       `json:"targetAudioCodec"`
	TargetResolution    string           `json:"targetResolution"`
	TargetVideoCodec    VideoCodec       `json:"targetVideoCodec"`
	TemporalAQ          bool             `json:"temporalAQ"`
	Threads             int              `json:"threads"`
	Tonemap             ToneMapping      `json:"tonemap"`
	Transcode           TranscodePolicy  `json:"transcode"`
	TwoPass             bool             `json:"twoPass"`
}

// SystemConfigImageDto defines model for SystemConfigImageDto.
type SystemConfigImageDto struct {
	Colorspace      Colorspace  `json:"colorspace"`
	ExtractEmbedded bool        `json:"extractEmbedded"`
	PreviewFormat   ImageFormat `json:"previewFormat"`
	PreviewSize     int         `json:"previewSize"`
	Quality         int         `json:"quality"`
	ThumbnailFormat ImageFormat `json:"thumbnailFormat"`
	ThumbnailSize   int         `json:"thumbnailSize"`
}

// SystemConfigJobDto defines model for SystemConfigJobDto.
type SystemConfigJobDto struct {
	BackgroundTask      JobSettingsDto `json:"backgroundTask"`
	FaceDetection       JobSettingsDto `json:"faceDetection"`
	Library             JobSettingsDto `json:"library"`
	MetadataExtraction  JobSettingsDto `json:"metadataExtraction"`
	Migration           JobSettingsDto `json:"migration"`
	Notifications       JobSettingsDto `json:"notifications"`
	Search              JobSettingsDto `json:"search"`
	Sidecar             JobSettingsDto `json:"sidecar"`
	SmartSearch         JobSettingsDto `json:"smartSearch"`
	ThumbnailGeneration JobSettingsDto `json:"thumbnailGeneration"`
	VideoConversion     JobSettingsDto `json:"videoConversion"`
}

// SystemConfigLibraryDto defines model for SystemConfigLibraryDto.
type SystemConfigLibraryDto struct {
	Scan  SystemConfigLibraryScanDto  `json:"scan"`
	Watch SystemConfigLibraryWatchDto `json:"watch"`
}

// SystemConfigLibraryScanDto defines model for SystemConfigLibraryScanDto.
type SystemConfigLibraryScanDto struct {
	CronExpression string `json:"cronExpression"`
	Enabled        bool   `json:"enabled"`
}

// SystemConfigLibraryWatchDto defines model for SystemConfigLibraryWatchDto.
type SystemConfigLibraryWatchDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigLoggingDto defines model for SystemConfigLoggingDto.
type SystemConfigLoggingDto struct {
	Enabled bool     `json:"enabled"`
	Level   LogLevel `json:"level"`
}

// SystemConfigMachineLearningDto defines model for SystemConfigMachineLearningDto.
type SystemConfigMachineLearningDto struct {
	Clip              CLIPConfig        `json:"clip"`
	Enabled           bool              `json:"enabled"`
	FacialRecognition RecognitionConfig `json:"facialRecognition"`
	Url               string            `json:"url"`
}

// SystemConfigMapDto defines model for SystemConfigMapDto.
type SystemConfigMapDto struct {
	DarkStyle  string `json:"darkStyle"`
	Enabled    bool   `json:"enabled"`
	LightStyle string `json:"lightStyle"`
}

// SystemConfigNewVersionCheckDto defines model for SystemConfigNewVersionCheckDto.
type SystemConfigNewVersionCheckDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigNotificationsDto defines model for SystemConfigNotificationsDto.
type SystemConfigNotificationsDto struct {
	Smtp SystemConfigSmtpDto `json:"smtp"`
}

// SystemConfigOAuthDto defines model for SystemConfigOAuthDto.
type SystemConfigOAuthDto struct {
	AutoLaunch            bool    `json:"autoLaunch"`
	AutoRegister          bool    `json:"autoRegister"`
	ButtonText            string  `json:"buttonText"`
	ClientId              string  `json:"clientId"`
	ClientSecret          string  `json:"clientSecret"`
	DefaultStorageQuota   float32 `json:"defaultStorageQuota"`
	Enabled               bool    `json:"enabled"`
	IssuerUrl             string  `json:"issuerUrl"`
	MobileOverrideEnabled bool    `json:"mobileOverrideEnabled"`
	MobileRedirectUri     string  `json:"mobileRedirectUri"`
	Scope                 string  `json:"scope"`
	SigningAlgorithm      string  `json:"signingAlgorithm"`
	StorageLabelClaim     string  `json:"storageLabelClaim"`
	StorageQuotaClaim     string  `json:"storageQuotaClaim"`
}

// SystemConfigPasswordLoginDto defines model for SystemConfigPasswordLoginDto.
type SystemConfigPasswordLoginDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigReverseGeocodingDto defines model for SystemConfigReverseGeocodingDto.
type SystemConfigReverseGeocodingDto struct {
	Enabled bool `json:"enabled"`
}

// SystemConfigServerDto defines model for SystemConfigServerDto.
type SystemConfigServerDto struct {
	ExternalDomain   string `json:"externalDomain"`
	LoginPageMessage string `json:"loginPageMessage"`
}

// SystemConfigSmtpDto defines model for SystemConfigSmtpDto.
type SystemConfigSmtpDto struct {
	Enabled   bool                         `json:"enabled"`
	From      string                       `json:"from"`
	ReplyTo   string                       `json:"replyTo"`
	Transport SystemConfigSmtpTransportDto `json:"transport"`
}

// SystemConfigSmtpTransportDto defines model for SystemConfigSmtpTransportDto.
type SystemConfigSmtpTransportDto struct {
	Host       string  `json:"host"`
	IgnoreCert bool    `json:"ignoreCert"`
	Password   string  `json:"password"`
	Port       float32 `json:"port"`
	Username   string  `json:"username"`
}

// SystemConfigStorageTemplateDto defines model for SystemConfigStorageTemplateDto.
type SystemConfigStorageTemplateDto struct {
	Enabled                 bool   `json:"enabled"`
	HashVerificationEnabled bool   `json:"hashVerificationEnabled"`
	Template                string `json:"template"`
}

// SystemConfigTemplateStorageOptionDto defines model for SystemConfigTemplateStorageOptionDto.
type SystemConfigTemplateStorageOptionDto struct {
	DayOptions    []string `json:"dayOptions"`
	HourOptions   []string `json:"hourOptions"`
	MinuteOptions []string `json:"minuteOptions"`
	MonthOptions  []string `json:"monthOptions"`
	PresetOptions []string `json:"presetOptions"`
	SecondOptions []string `json:"secondOptions"`
	WeekOptions   []string `json:"weekOptions"`
	YearOptions   []string `json:"yearOptions"`
}

// SystemConfigThemeDto defines model for SystemConfigThemeDto.
type SystemConfigThemeDto struct {
	CustomCss string `json:"customCss"`
}

// SystemConfigTrashDto defines model for SystemConfigTrashDto.
type SystemConfigTrashDto struct {
	Days    int  `json:"days"`
	Enabled bool `json:"enabled"`
}

// SystemConfigUserDto defines model for SystemConfigUserDto.
type SystemConfigUserDto struct {
	DeleteDelay int `json:"deleteDelay"`
}

// TagResponseDto defines model for TagResponseDto.
type TagResponseDto struct {
	Id     string      `json:"id"`
	Name   string      `json:"name"`
	Type   TagTypeEnum `json:"type"`
	UserId string      `json:"userId"`
}

// TagTypeEnum defines model for TagTypeEnum.
type TagTypeEnum string

// ThumbnailFormat defines model for ThumbnailFormat.
type ThumbnailFormat string

// TimeBucketResponseDto defines model for TimeBucketResponseDto.
type TimeBucketResponseDto struct {
	Count      int    `json:"count"`
	TimeBucket string `json:"timeBucket"`
}

// TimeBucketSize defines model for TimeBucketSize.
type TimeBucketSize string

// ToneMapping defines model for ToneMapping.
type ToneMapping string

// TranscodeHWAccel defines model for TranscodeHWAccel.
type TranscodeHWAccel string

// TranscodePolicy defines model for TranscodePolicy.
type TranscodePolicy string

// UpdateAlbumDto defines model for UpdateAlbumDto.
type UpdateAlbumDto struct {
	AlbumName             *string             `json:"albumName,omitempty"`
	AlbumThumbnailAssetId *openapi_types.UUID `json:"albumThumbnailAssetId,omitempty"`
	Description           *string             `json:"description,omitempty"`
	IsActivityEnabled     *bool               `json:"isActivityEnabled,omitempty"`
	Order                 *AssetOrder         `json:"order,omitempty"`
}

// UpdateAlbumUserDto defines model for UpdateAlbumUserDto.
type UpdateAlbumUserDto struct {
	Role AlbumUserRole `json:"role"`
}

// UpdateAssetDto defines model for UpdateAssetDto.
type UpdateAssetDto struct {
	DateTimeOriginal *string  `json:"dateTimeOriginal,omitempty"`
	Description      *string  `json:"description,omitempty"`
	IsArchived       *bool    `json:"isArchived,omitempty"`
	IsFavorite       *bool    `json:"isFavorite,omitempty"`
	Latitude         *float32 `json:"latitude,omitempty"`
	Longitude        *float32 `json:"longitude,omitempty"`
}

// UpdateLibraryDto defines model for UpdateLibraryDto.
type UpdateLibraryDto struct {
	ExclusionPatterns *[]string `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string `json:"importPaths,omitempty"`
	IsVisible         *bool     `json:"isVisible,omitempty"`
	Name              *string   `json:"name,omitempty"`
}

// UpdatePartnerDto defines model for UpdatePartnerDto.
type UpdatePartnerDto struct {
	InTimeline bool `json:"inTimeline"`
}

// UpdateStackParentDto defines model for UpdateStackParentDto.
type UpdateStackParentDto struct {
	NewParentId openapi_types.UUID `json:"newParentId"`
	OldParentId openapi_types.UUID `json:"oldParentId"`
}

// UpdateTagDto defines model for UpdateTagDto.
type UpdateTagDto struct {
	Name *string `json:"name,omitempty"`
}

// UpdateUserDto defines model for UpdateUserDto.
type UpdateUserDto struct {
	AvatarColor          *UserAvatarColor   `json:"avatarColor,omitempty"`
	Email                *string            `json:"email,omitempty"`
	Id                   openapi_types.UUID `json:"id"`
	IsAdmin              *bool              `json:"isAdmin,omitempty"`
	MemoriesEnabled      *bool              `json:"memoriesEnabled,omitempty"`
	Name                 *string            `json:"name,omitempty"`
	Password             *string            `json:"password,omitempty"`
	QuotaSizeInBytes     *int64             `json:"quotaSizeInBytes"`
	ShouldChangePassword *bool              `json:"shouldChangePassword,omitempty"`
	StorageLabel         *string            `json:"storageLabel,omitempty"`
}

// UsageByUserDto defines model for UsageByUserDto.
type UsageByUserDto struct {
	Photos           int    `json:"photos"`
	QuotaSizeInBytes *int64 `json:"quotaSizeInBytes"`
	Usage            int64  `json:"usage"`
	UserId           string `json:"userId"`
	UserName         string `json:"userName"`
	Videos           int    `json:"videos"`
}

// UserAvatarColor defines model for UserAvatarColor.
type UserAvatarColor string

// UserDto defines model for UserDto.
type UserDto struct {
	AvatarColor      UserAvatarColor `json:"avatarColor"`
	Email            string          `json:"email"`
	Id               string          `json:"id"`
	Name             string          `json:"name"`
	ProfileImagePath string          `json:"profileImagePath"`
}

// UserResponseDto defines model for UserResponseDto.
type UserResponseDto struct {
	AvatarColor          UserAvatarColor `json:"avatarColor"`
	CreatedAt            time.Time       `json:"createdAt"`
	DeletedAt            *time.Time      `json:"deletedAt"`
	Email                string          `json:"email"`
	Id                   string          `json:"id"`
	IsAdmin              bool            `json:"isAdmin"`
	MemoriesEnabled      *bool           `json:"memoriesEnabled,omitempty"`
	Name                 string          `json:"name"`
	OauthId              string          `json:"oauthId"`
	ProfileImagePath     string          `json:"profileImagePath"`
	QuotaSizeInBytes     *int64          `json:"quotaSizeInBytes"`
	QuotaUsageInBytes    *int64          `json:"quotaUsageInBytes"`
	ShouldChangePassword bool            `json:"shouldChangePassword"`
	Status               UserStatus      `json:"status"`
	StorageLabel         *string         `json:"storageLabel"`
	UpdatedAt            time.Time       `json:"updatedAt"`
}

// UserStatus defines model for UserStatus.
type UserStatus string

// ValidateAccessTokenResponseDto defines model for ValidateAccessTokenResponseDto.
type ValidateAccessTokenResponseDto struct {
	AuthStatus bool `json:"authStatus"`
}

// ValidateLibraryDto defines model for ValidateLibraryDto.
type ValidateLibraryDto struct {
	ExclusionPatterns *[]string `json:"exclusionPatterns,omitempty"`
	ImportPaths       *[]string `json:"importPaths,omitempty"`
}

// ValidateLibraryImportPathResponseDto defines model for ValidateLibraryImportPathResponseDto.
type ValidateLibraryImportPathResponseDto struct {
	ImportPath string  `json:"importPath"`
	IsValid    bool    `json:"isValid"`
	Message    *string `json:"message,omitempty"`
}

// ValidateLibraryResponseDto defines model for ValidateLibraryResponseDto.
type ValidateLibraryResponseDto struct {
	ImportPaths *[]ValidateLibraryImportPathResponseDto `json:"importPaths,omitempty"`
}

// VideoCodec defines model for VideoCodec.
type VideoCodec string

// GetActivitiesParams defines parameters for GetActivities.
type GetActivitiesParams struct {
	AlbumId openapi_types.UUID  `form:"albumId" json:"albumId"`
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
	Level   *ReactionLevel      `form:"level,omitempty" json:"level,omitempty"`
	Type    *ReactionType       `form:"type,omitempty" json:"type,omitempty"`
	UserId  *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetActivityStatisticsParams defines parameters for GetActivityStatistics.
type GetActivityStatisticsParams struct {
	AlbumId openapi_types.UUID  `form:"albumId" json:"albumId"`
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
}

// GetAllAlbumsParams defines parameters for GetAllAlbums.
type GetAllAlbumsParams struct {
	// AssetId Only returns albums that contain the asset
	// Ignores the shared parameter
	// undefined: get all albums
	AssetId *openapi_types.UUID `form:"assetId,omitempty" json:"assetId,omitempty"`
	Shared  *bool               `form:"shared,omitempty" json:"shared,omitempty"`
}

// GetAlbumInfoParams defines parameters for GetAlbumInfo.
type GetAlbumInfoParams struct {
	Key           *string `form:"key,omitempty" json:"key,omitempty"`
	WithoutAssets *bool   `form:"withoutAssets,omitempty" json:"withoutAssets,omitempty"`
}

// AddAssetsToAlbumParams defines parameters for AddAssetsToAlbum.
type AddAssetsToAlbumParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetAllAssetsParams defines parameters for GetAllAssets.
type GetAllAssetsParams struct {
	IsArchived    *bool               `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite    *bool               `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	Skip          *int                `form:"skip,omitempty" json:"skip,omitempty"`
	Take          *int                `form:"take,omitempty" json:"take,omitempty"`
	UpdatedAfter  *time.Time          `form:"updatedAfter,omitempty" json:"updatedAfter,omitempty"`
	UpdatedBefore *time.Time          `form:"updatedBefore,omitempty" json:"updatedBefore,omitempty"`
	UserId        *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`

	// IfNoneMatch ETag of data already cached on the client
	IfNoneMatch *string `json:"if-none-match,omitempty"`
}

// ServeFileParams defines parameters for ServeFile.
type ServeFileParams struct {
	IsThumb *bool   `form:"isThumb,omitempty" json:"isThumb,omitempty"`
	IsWeb   *bool   `form:"isWeb,omitempty" json:"isWeb,omitempty"`
	Key     *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetMapMarkersParams defines parameters for GetMapMarkers.
type GetMapMarkersParams struct {
	FileCreatedAfter  *time.Time `form:"fileCreatedAfter,omitempty" json:"fileCreatedAfter,omitempty"`
	FileCreatedBefore *time.Time `form:"fileCreatedBefore,omitempty" json:"fileCreatedBefore,omitempty"`
	IsArchived        *bool      `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite        *bool      `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	WithPartners      *bool      `form:"withPartners,omitempty" json:"withPartners,omitempty"`
}

// GetMemoryLaneParams defines parameters for GetMemoryLane.
type GetMemoryLaneParams struct {
	Day   int `form:"day" json:"day"`
	Month int `form:"month" json:"month"`
}

// GetRandomParams defines parameters for GetRandom.
type GetRandomParams struct {
	Count *float32 `form:"count,omitempty" json:"count,omitempty"`
}

// GetAssetStatisticsParams defines parameters for GetAssetStatistics.
type GetAssetStatisticsParams struct {
	IsArchived *bool `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite *bool `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed  *bool `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
}

// GetAssetThumbnailParams defines parameters for GetAssetThumbnail.
type GetAssetThumbnailParams struct {
	Format *ThumbnailFormat `form:"format,omitempty" json:"format,omitempty"`
	Key    *string          `form:"key,omitempty" json:"key,omitempty"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// XImmichChecksum sha1 checksum that can be used for duplicate detection before the file is uploaded
	XImmichChecksum *string `json:"x-immich-checksum,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetAuditDeletesParams defines parameters for GetAuditDeletes.
type GetAuditDeletesParams struct {
	After      time.Time           `form:"after" json:"after"`
	EntityType EntityType          `form:"entityType" json:"entityType"`
	UserId     *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
}

// DownloadArchiveParams defines parameters for DownloadArchive.
type DownloadArchiveParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// DownloadFileParams defines parameters for DownloadFile.
type DownloadFileParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetDownloadInfoParams defines parameters for GetDownloadInfo.
type GetDownloadInfoParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetFacesParams defines parameters for GetFaces.
type GetFacesParams struct {
	Id openapi_types.UUID `form:"id" json:"id"`
}

// GetAllLibrariesParams defines parameters for GetAllLibraries.
type GetAllLibrariesParams struct {
	Type *LibraryType `form:"type,omitempty" json:"type,omitempty"`
}

// GetPartnersParams defines parameters for GetPartners.
type GetPartnersParams struct {
	Direction GetPartnersParamsDirection `form:"direction" json:"direction"`
}

// GetPartnersParamsDirection defines parameters for GetPartners.
type GetPartnersParamsDirection string

// GetAllPeopleParams defines parameters for GetAllPeople.
type GetAllPeopleParams struct {
	WithHidden *bool `form:"withHidden,omitempty" json:"withHidden,omitempty"`
}

// SearchPersonParams defines parameters for SearchPerson.
type SearchPersonParams struct {
	Name       string `form:"name" json:"name"`
	WithHidden *bool  `form:"withHidden,omitempty" json:"withHidden,omitempty"`
}

// SearchPlacesParams defines parameters for SearchPlaces.
type SearchPlacesParams struct {
	Name string `form:"name" json:"name"`
}

// GetSearchSuggestionsParams defines parameters for GetSearchSuggestions.
type GetSearchSuggestionsParams struct {
	Country *string              `form:"country,omitempty" json:"country,omitempty"`
	Make    *string              `form:"make,omitempty" json:"make,omitempty"`
	Model   *string              `form:"model,omitempty" json:"model,omitempty"`
	State   *string              `form:"state,omitempty" json:"state,omitempty"`
	Type    SearchSuggestionType `form:"type" json:"type"`
}

// GetMySharedLinkParams defines parameters for GetMySharedLink.
type GetMySharedLinkParams struct {
	Key      *string `form:"key,omitempty" json:"key,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty"`
	Token    *string `form:"token,omitempty" json:"token,omitempty"`
}

// RemoveSharedLinkAssetsParams defines parameters for RemoveSharedLinkAssets.
type RemoveSharedLinkAssetsParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// AddSharedLinkAssetsParams defines parameters for AddSharedLinkAssets.
type AddSharedLinkAssetsParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetMapStyleParams defines parameters for GetMapStyle.
type GetMapStyleParams struct {
	Key   *string  `form:"key,omitempty" json:"key,omitempty"`
	Theme MapTheme `form:"theme" json:"theme"`
}

// GetTimeBucketParams defines parameters for GetTimeBucket.
type GetTimeBucketParams struct {
	AlbumId      *openapi_types.UUID `form:"albumId,omitempty" json:"albumId,omitempty"`
	IsArchived   *bool               `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite   *bool               `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed    *bool               `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Key          *string             `form:"key,omitempty" json:"key,omitempty"`
	Order        *AssetOrder         `form:"order,omitempty" json:"order,omitempty"`
	PersonId     *openapi_types.UUID `form:"personId,omitempty" json:"personId,omitempty"`
	Size         TimeBucketSize      `form:"size" json:"size"`
	TimeBucket   string              `form:"timeBucket" json:"timeBucket"`
	UserId       *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
	WithPartners *bool               `form:"withPartners,omitempty" json:"withPartners,omitempty"`
	WithStacked  *bool               `form:"withStacked,omitempty" json:"withStacked,omitempty"`
}

// GetTimeBucketsParams defines parameters for GetTimeBuckets.
type GetTimeBucketsParams struct {
	AlbumId      *openapi_types.UUID `form:"albumId,omitempty" json:"albumId,omitempty"`
	IsArchived   *bool               `form:"isArchived,omitempty" json:"isArchived,omitempty"`
	IsFavorite   *bool               `form:"isFavorite,omitempty" json:"isFavorite,omitempty"`
	IsTrashed    *bool               `form:"isTrashed,omitempty" json:"isTrashed,omitempty"`
	Key          *string             `form:"key,omitempty" json:"key,omitempty"`
	Order        *AssetOrder         `form:"order,omitempty" json:"order,omitempty"`
	PersonId     *openapi_types.UUID `form:"personId,omitempty" json:"personId,omitempty"`
	Size         TimeBucketSize      `form:"size" json:"size"`
	UserId       *openapi_types.UUID `form:"userId,omitempty" json:"userId,omitempty"`
	WithPartners *bool               `form:"withPartners,omitempty" json:"withPartners,omitempty"`
	WithStacked  *bool               `form:"withStacked,omitempty" json:"withStacked,omitempty"`
}

// GetAllUsersParams defines parameters for GetAllUsers.
type GetAllUsersParams struct {
	IsAll bool `form:"isAll" json:"isAll"`
}

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = ActivityCreateDto

// CreateAlbumJSONRequestBody defines body for CreateAlbum for application/json ContentType.
type CreateAlbumJSONRequestBody = CreateAlbumDto

// UpdateAlbumInfoJSONRequestBody defines body for UpdateAlbumInfo for application/json ContentType.
type UpdateAlbumInfoJSONRequestBody = UpdateAlbumDto

// RemoveAssetFromAlbumJSONRequestBody defines body for RemoveAssetFromAlbum for application/json ContentType.
type RemoveAssetFromAlbumJSONRequestBody = BulkIdsDto

// AddAssetsToAlbumJSONRequestBody defines body for AddAssetsToAlbum for application/json ContentType.
type AddAssetsToAlbumJSONRequestBody = BulkIdsDto

// UpdateAlbumUserJSONRequestBody defines body for UpdateAlbumUser for application/json ContentType.
type UpdateAlbumUserJSONRequestBody = UpdateAlbumUserDto

// AddUsersToAlbumJSONRequestBody defines body for AddUsersToAlbum for application/json ContentType.
type AddUsersToAlbumJSONRequestBody = AddUsersDto

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = APIKeyCreateDto

// UpdateApiKeyJSONRequestBody defines body for UpdateApiKey for application/json ContentType.
type UpdateApiKeyJSONRequestBody = APIKeyUpdateDto

// DeleteAssetsJSONRequestBody defines body for DeleteAssets for application/json ContentType.
type DeleteAssetsJSONRequestBody = AssetBulkDeleteDto

// UpdateAssetsJSONRequestBody defines body for UpdateAssets for application/json ContentType.
type UpdateAssetsJSONRequestBody = AssetBulkUpdateDto

// CheckBulkUploadJSONRequestBody defines body for CheckBulkUpload for application/json ContentType.
type CheckBulkUploadJSONRequestBody = AssetBulkUploadCheckDto

// CheckExistingAssetsJSONRequestBody defines body for CheckExistingAssets for application/json ContentType.
type CheckExistingAssetsJSONRequestBody = CheckExistingAssetsDto

// RunAssetJobsJSONRequestBody defines body for RunAssetJobs for application/json ContentType.
type RunAssetJobsJSONRequestBody = AssetJobsDto

// UpdateStackParentJSONRequestBody defines body for UpdateStackParent for application/json ContentType.
type UpdateStackParentJSONRequestBody = UpdateStackParentDto

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileMultipartRequestBody = CreateAssetDto

// UpdateAssetJSONRequestBody defines body for UpdateAsset for application/json ContentType.
type UpdateAssetJSONRequestBody = UpdateAssetDto

// SignUpAdminJSONRequestBody defines body for SignUpAdmin for application/json ContentType.
type SignUpAdminJSONRequestBody = SignUpDto

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordDto

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginCredentialDto

// DownloadArchiveJSONRequestBody defines body for DownloadArchive for application/json ContentType.
type DownloadArchiveJSONRequestBody = AssetIdsDto

// GetDownloadInfoJSONRequestBody defines body for GetDownloadInfo for application/json ContentType.
type GetDownloadInfoJSONRequestBody = DownloadInfoDto

// ReassignFacesByIdJSONRequestBody defines body for ReassignFacesById for application/json ContentType.
type ReassignFacesByIdJSONRequestBody = FaceDto

// SendJobCommandJSONRequestBody defines body for SendJobCommand for application/json ContentType.
type SendJobCommandJSONRequestBody = JobCommandDto

// CreateLibraryJSONRequestBody defines body for CreateLibrary for application/json ContentType.
type CreateLibraryJSONRequestBody = CreateLibraryDto

// UpdateLibraryJSONRequestBody defines body for UpdateLibrary for application/json ContentType.
type UpdateLibraryJSONRequestBody = UpdateLibraryDto

// ScanLibraryJSONRequestBody defines body for ScanLibrary for application/json ContentType.
type ScanLibraryJSONRequestBody = ScanLibraryDto

// ValidateJSONRequestBody defines body for Validate for application/json ContentType.
type ValidateJSONRequestBody = ValidateLibraryDto

// CreateMemoryJSONRequestBody defines body for CreateMemory for application/json ContentType.
type CreateMemoryJSONRequestBody = MemoryCreateDto

// UpdateMemoryJSONRequestBody defines body for UpdateMemory for application/json ContentType.
type UpdateMemoryJSONRequestBody = MemoryUpdateDto

// RemoveMemoryAssetsJSONRequestBody defines body for RemoveMemoryAssets for application/json ContentType.
type RemoveMemoryAssetsJSONRequestBody = BulkIdsDto

// AddMemoryAssetsJSONRequestBody defines body for AddMemoryAssets for application/json ContentType.
type AddMemoryAssetsJSONRequestBody = BulkIdsDto

// StartOAuthJSONRequestBody defines body for StartOAuth for application/json ContentType.
type StartOAuthJSONRequestBody = OAuthConfigDto

// FinishOAuthJSONRequestBody defines body for FinishOAuth for application/json ContentType.
type FinishOAuthJSONRequestBody = OAuthCallbackDto

// LinkOAuthAccountJSONRequestBody defines body for LinkOAuthAccount for application/json ContentType.
type LinkOAuthAccountJSONRequestBody = OAuthCallbackDto

// UpdatePartnerJSONRequestBody defines body for UpdatePartner for application/json ContentType.
type UpdatePartnerJSONRequestBody = UpdatePartnerDto

// CreatePersonJSONRequestBody defines body for CreatePerson for application/json ContentType.
type CreatePersonJSONRequestBody = PersonCreateDto

// UpdatePeopleJSONRequestBody defines body for UpdatePeople for application/json ContentType.
type UpdatePeopleJSONRequestBody = PeopleUpdateDto

// UpdatePersonJSONRequestBody defines body for UpdatePerson for application/json ContentType.
type UpdatePersonJSONRequestBody = PersonUpdateDto

// MergePersonJSONRequestBody defines body for MergePerson for application/json ContentType.
type MergePersonJSONRequestBody = MergePersonDto

// ReassignFacesJSONRequestBody defines body for ReassignFaces for application/json ContentType.
type ReassignFacesJSONRequestBody = AssetFaceUpdateDto

// GetFileChecksumsJSONRequestBody defines body for GetFileChecksums for application/json ContentType.
type GetFileChecksumsJSONRequestBody = FileChecksumDto

// FixAuditFilesJSONRequestBody defines body for FixAuditFiles for application/json ContentType.
type FixAuditFilesJSONRequestBody = FileReportFixDto

// SearchMetadataJSONRequestBody defines body for SearchMetadata for application/json ContentType.
type SearchMetadataJSONRequestBody = MetadataSearchDto

// SearchSmartJSONRequestBody defines body for SearchSmart for application/json ContentType.
type SearchSmartJSONRequestBody = SmartSearchDto

// CreateSharedLinkJSONRequestBody defines body for CreateSharedLink for application/json ContentType.
type CreateSharedLinkJSONRequestBody = SharedLinkCreateDto

// UpdateSharedLinkJSONRequestBody defines body for UpdateSharedLink for application/json ContentType.
type UpdateSharedLinkJSONRequestBody = SharedLinkEditDto

// RemoveSharedLinkAssetsJSONRequestBody defines body for RemoveSharedLinkAssets for application/json ContentType.
type RemoveSharedLinkAssetsJSONRequestBody = AssetIdsDto

// AddSharedLinkAssetsJSONRequestBody defines body for AddSharedLinkAssets for application/json ContentType.
type AddSharedLinkAssetsJSONRequestBody = AssetIdsDto

// GetDeltaSyncJSONRequestBody defines body for GetDeltaSync for application/json ContentType.
type GetDeltaSyncJSONRequestBody = AssetDeltaSyncDto

// GetFullSyncForUserJSONRequestBody defines body for GetFullSyncForUser for application/json ContentType.
type GetFullSyncForUserJSONRequestBody = AssetFullSyncDto

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = SystemConfigDto

// UpdateAdminOnboardingJSONRequestBody defines body for UpdateAdminOnboarding for application/json ContentType.
type UpdateAdminOnboardingJSONRequestBody = AdminOnboardingUpdateDto

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = CreateTagDto

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = UpdateTagDto

// UntagAssetsJSONRequestBody defines body for UntagAssets for application/json ContentType.
type UntagAssetsJSONRequestBody = AssetIdsDto

// TagAssetsJSONRequestBody defines body for TagAssets for application/json ContentType.
type TagAssetsJSONRequestBody = AssetIdsDto

// RestoreAssetsJSONRequestBody defines body for RestoreAssets for application/json ContentType.
type RestoreAssetsJSONRequestBody = BulkIdsDto

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserDto

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserDto

// CreateProfileImageMultipartRequestBody defines body for CreateProfileImage for multipart/form-data ContentType.
type CreateProfileImageMultipartRequestBody = CreateProfileImageDto

// DeleteUserJSONRequestBody defines body for DeleteUser for application/json ContentType.
type DeleteUserJSONRequestBody = DeleteUserDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetActivities request
	GetActivities(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateActivityWithBody request with any body
	CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivityStatistics request
	GetActivityStatistics(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActivity request
	DeleteActivity(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAlbums request
	GetAllAlbums(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlbumWithBody request with any body
	CreateAlbumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlbum(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumCount request
	GetAlbumCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlbum request
	DeleteAlbum(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlbumInfo request
	GetAlbumInfo(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlbumInfoWithBody request with any body
	UpdateAlbumInfoWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlbumInfo(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAssetFromAlbumWithBody request with any body
	RemoveAssetFromAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveAssetFromAlbum(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAssetsToAlbumWithBody request with any body
	AddAssetsToAlbumWithBody(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAssetsToAlbum(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromAlbum request
	RemoveUserFromAlbum(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlbumUserWithBody request with any body
	UpdateAlbumUserWithBody(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlbumUser(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUsersToAlbumWithBody request with any body
	AddUsersToAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUsersToAlbum(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKeys request
	GetApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyWithBody request with any body
	CreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKey(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKey request
	DeleteApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiKeyWithBody request with any body
	UpdateApiKeyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiKey(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssetsWithBody request with any body
	DeleteAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAssets(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAssets request
	GetAllAssets(ctx context.Context, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAssetsWithBody request with any body
	UpdateAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAssets(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckBulkUploadWithBody request with any body
	CheckBulkUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckBulkUpload(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUserAssetsByDeviceId request
	GetAllUserAssetsByDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckExistingAssetsWithBody request with any body
	CheckExistingAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckExistingAssets(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServeFile request
	ServeFile(ctx context.Context, id openapi_types.UUID, params *ServeFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunAssetJobsWithBody request with any body
	RunAssetJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunAssetJobs(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapMarkers request
	GetMapMarkers(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemoryLane request
	GetMemoryLane(ctx context.Context, params *GetMemoryLaneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandom request
	GetRandom(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStackParentWithBody request with any body
	UpdateStackParentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStackParent(ctx context.Context, body UpdateStackParentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetStatistics request
	GetAssetStatistics(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetThumbnail request
	GetAssetThumbnail(ctx context.Context, id openapi_types.UUID, params *GetAssetThumbnailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFileWithBody request with any body
	UploadFileWithBody(ctx context.Context, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetInfo request
	GetAssetInfo(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAssetWithBody request with any body
	UpdateAssetWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAsset(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditDeletes request
	GetAuditDeletes(ctx context.Context, params *GetAuditDeletesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignUpAdminWithBody request with any body
	SignUpAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SignUpAdmin(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordWithBody request with any body
	ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateAccessToken request
	ValidateAccessToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadArchiveWithBody request with any body
	DownloadArchiveWithBody(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DownloadArchive(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadFile request
	DownloadFile(ctx context.Context, id openapi_types.UUID, params *DownloadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDownloadInfoWithBody request with any body
	GetDownloadInfoWithBody(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDownloadInfo(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFaces request
	GetFaces(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReassignFacesByIdWithBody request with any body
	ReassignFacesByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReassignFacesById(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllJobsStatus request
	GetAllJobsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendJobCommandWithBody request with any body
	SendJobCommandWithBody(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendJobCommand(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLibraries request
	GetAllLibraries(ctx context.Context, params *GetAllLibrariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLibraryWithBody request with any body
	CreateLibraryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLibrary(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLibrary request
	DeleteLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibrary request
	GetLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLibraryWithBody request with any body
	UpdateLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLibrary(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveOfflineFiles request
	RemoveOfflineFiles(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScanLibraryWithBody request with any body
	ScanLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScanLibrary(ctx context.Context, id openapi_types.UUID, body ScanLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibraryStatistics request
	GetLibraryStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateWithBody request with any body
	ValidateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Validate(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMemories request
	SearchMemories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMemoryWithBody request with any body
	CreateMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMemory(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMemory request
	DeleteMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMemory request
	GetMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMemoryWithBody request with any body
	UpdateMemoryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMemory(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMemoryAssetsWithBody request with any body
	RemoveMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMemoryAssets(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMemoryAssetsWithBody request with any body
	AddMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMemoryAssets(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartOAuthWithBody request with any body
	StartOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartOAuth(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinishOAuthWithBody request with any body
	FinishOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FinishOAuth(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkOAuthAccountWithBody request with any body
	LinkOAuthAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LinkOAuthAccount(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedirectOAuthToMobile request
	RedirectOAuthToMobile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnlinkOAuthAccount request
	UnlinkOAuthAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartners request
	GetPartners(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovePartner request
	RemovePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePartner request
	CreatePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePartnerWithBody request with any body
	UpdatePartnerWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePartner(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPeople request
	GetAllPeople(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePersonWithBody request with any body
	CreatePersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePerson(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePeopleWithBody request with any body
	UpdatePeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePeople(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerson request
	GetPerson(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePersonWithBody request with any body
	UpdatePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePerson(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonAssets request
	GetPersonAssets(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MergePersonWithBody request with any body
	MergePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MergePerson(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReassignFacesWithBody request with any body
	ReassignFacesWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReassignFaces(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonStatistics request
	GetPersonStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonThumbnail request
	GetPersonThumbnail(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditFiles request
	GetAuditFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFileChecksumsWithBody request with any body
	GetFileChecksumsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFileChecksums(ctx context.Context, body GetFileChecksumsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FixAuditFilesWithBody request with any body
	FixAuditFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FixAuditFiles(ctx context.Context, body FixAuditFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsByCity request
	GetAssetsByCity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExploreData request
	GetExploreData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMetadataWithBody request with any body
	SearchMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchMetadata(ctx context.Context, body SearchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPerson request
	SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPlaces request
	SearchPlaces(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSmartWithBody request with any body
	SearchSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchSmart(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSuggestions request
	GetSearchSuggestions(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerInfo request
	GetServerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerConfig request
	GetServerConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerFeatures request
	GetServerFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportedMediaTypes request
	GetSupportedMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingServer request
	PingServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerStatistics request
	GetServerStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTheme request
	GetTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerVersion request
	GetServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllSessions request
	DeleteAllSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessions request
	GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSession request
	DeleteSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSharedLinks request
	GetAllSharedLinks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSharedLinkWithBody request with any body
	CreateSharedLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSharedLink(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMySharedLink request
	GetMySharedLink(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSharedLink request
	RemoveSharedLink(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedLinkById request
	GetSharedLinkById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSharedLinkWithBody request with any body
	UpdateSharedLinkWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSharedLink(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSharedLinkAssetsWithBody request with any body
	RemoveSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSharedLinkAssetsWithBody request with any body
	AddSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeltaSyncWithBody request with any body
	GetDeltaSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDeltaSync(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFullSyncForUserWithBody request with any body
	GetFullSyncForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFullSyncForUser(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConfigWithBody request with any body
	UpdateConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConfig(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigDefaults request
	GetConfigDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapStyle request
	GetMapStyle(ctx context.Context, params *GetMapStyleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageTemplateOptions request
	GetStorageTemplateOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminOnboarding request
	GetAdminOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAdminOnboardingWithBody request with any body
	UpdateAdminOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAdminOnboarding(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReverseGeocodingState request
	GetReverseGeocodingState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTags request
	GetAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagWithBody request with any body
	CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagById request
	GetTagById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagWithBody request with any body
	UpdateTagWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTag(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UntagAssetsWithBody request with any body
	UntagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UntagAssets(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagAssets request
	GetTagAssets(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TagAssetsWithBody request with any body
	TagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TagAssets(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeBucket request
	GetTimeBucket(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeBuckets request
	GetTimeBuckets(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmptyTrash request
	EmptyTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreTrash request
	RestoreTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreAssetsWithBody request with any body
	RestoreAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestoreAssets(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUsers request
	GetAllUsers(ctx context.Context, params *GetAllUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserById request
	GetUserById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyUserInfo request
	GetMyUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProfileImage request
	DeleteProfileImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProfileImageWithBody request with any body
	CreateProfileImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileImage request
	GetProfileImage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserWithBody request with any body
	DeleteUserWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUser(ctx context.Context, id openapi_types.UUID, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreUser request
	RestoreUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetActivities(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateActivity(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateActivityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityStatistics(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActivity(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActivityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAlbums(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAlbumsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlbumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlbumRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlbum(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlbumRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlbum(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlbumRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlbumInfo(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlbumInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumInfoWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumInfo(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssetFromAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssetFromAlbumRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAssetFromAlbum(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAssetFromAlbumRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAssetsToAlbumWithBody(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAssetsToAlbumRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAssetsToAlbum(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAssetsToAlbumRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromAlbum(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromAlbumRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumUserWithBody(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumUserRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlbumUser(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlbumUserRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToAlbumWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToAlbumRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToAlbum(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToAlbumRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKey(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKeyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKey(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssets(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAssets(ctx context.Context, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAssetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssets(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckBulkUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckBulkUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckBulkUpload(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckBulkUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUserAssetsByDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUserAssetsByDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckExistingAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckExistingAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckExistingAssets(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckExistingAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServeFile(ctx context.Context, id openapi_types.UUID, params *ServeFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServeFileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunAssetJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunAssetJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunAssetJobs(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunAssetJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapMarkers(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMarkersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemoryLane(ctx context.Context, params *GetMemoryLaneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemoryLaneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandom(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStackParentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStackParentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStackParent(ctx context.Context, body UpdateStackParentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStackParentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetStatistics(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetThumbnail(ctx context.Context, id openapi_types.UUID, params *GetAssetThumbnailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetThumbnailRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileWithBody(ctx context.Context, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetInfo(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssetWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAsset(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditDeletes(ctx context.Context, params *GetAuditDeletesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditDeletesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignUpAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignUpAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignUpAdmin(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignUpAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateAccessToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateAccessTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadArchiveWithBody(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadArchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadArchive(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadArchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadFile(ctx context.Context, id openapi_types.UUID, params *DownloadFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadFileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadInfoWithBody(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadInfoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadInfo(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadInfoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaces(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesByIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesById(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesByIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllJobsStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllJobsStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobCommandWithBody(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobCommandRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendJobCommand(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendJobCommandRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLibraries(ctx context.Context, params *GetAllLibrariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLibrariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLibraryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLibraryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLibrary(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLibraryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLibraryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibrary(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLibraryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLibrary(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLibraryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveOfflineFiles(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveOfflineFilesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScanLibraryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanLibraryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScanLibrary(ctx context.Context, id openapi_types.UUID, body ScanLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanLibraryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibraryStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryStatisticsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Validate(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMemories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMemoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMemory(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMemoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMemory(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMemoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemoryWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemory(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemoryAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMemoryAssets(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemoryAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMemoryAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemoryAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMemoryAssets(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemoryAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOAuth(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishOAuth(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkOAuthAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkOAuthAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkOAuthAccount(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkOAuthAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedirectOAuthToMobile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedirectOAuthToMobileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlinkOAuthAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlinkOAuthAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartners(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePartner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartnerWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartner(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartnerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPeople(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPeopleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePerson(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePeopleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePeopleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePeople(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePeopleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerson(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePersonRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePerson(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePersonRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonAssets(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonAssetsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergePersonWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergePersonRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MergePerson(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMergePersonRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFacesWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReassignFaces(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReassignFacesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonStatistics(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonStatisticsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonThumbnail(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonThumbnailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditFiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditFilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileChecksumsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileChecksumsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileChecksums(ctx context.Context, body GetFileChecksumsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileChecksumsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FixAuditFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFixAuditFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FixAuditFiles(ctx context.Context, body FixAuditFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFixAuditFilesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsByCity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsByCityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExploreData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExploreDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMetadataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMetadata(ctx context.Context, body SearchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMetadataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPersonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPlaces(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPlacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSmartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSmartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSmart(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSmartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSuggestions(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSuggestionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportedMediaTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportedMediaTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerStatisticsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTheme(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThemeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSession(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSharedLinks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSharedLinksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSharedLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSharedLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSharedLink(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSharedLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMySharedLink(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMySharedLinkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLink(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedLinkById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedLinkByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSharedLinkWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSharedLinkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSharedLink(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSharedLinkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkAssetsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSharedLinkAssetsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSharedLinkAssetsWithBody(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSharedLinkAssetsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSharedLinkAssets(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSharedLinkAssetsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeltaSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeltaSync(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeltaSyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFullSyncForUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFullSyncForUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFullSyncForUser(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFullSyncForUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfig(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigDefaults(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigDefaultsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapStyle(ctx context.Context, params *GetMapStyleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapStyleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageTemplateOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageTemplateOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminOnboarding(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminOnboardingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminOnboardingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminOnboardingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAdminOnboarding(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdminOnboardingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReverseGeocodingState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReverseGeocodingStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTag(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UntagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUntagAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UntagAssets(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUntagAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagAssets(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagAssetsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagAssetsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TagAssets(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTagAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeBucket(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeBucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeBuckets(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeBucketsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmptyTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmptyTrashRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreTrash(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreTrashRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreAssets(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUsers(ctx context.Context, params *GetAllUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyUserInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProfileImage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProfileImageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProfileImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProfileImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileImage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileImageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, id openapi_types.UUID, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetActivitiesRequest generates requests for GetActivities
func NewGetActivitiesRequest(server string, params *GetActivitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, params.AlbumId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Level != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateActivityRequest calls the generic CreateActivity builder with application/json body
func NewCreateActivityRequest(server string, body CreateActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateActivityRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateActivityRequestWithBody generates requests for CreateActivity with any type of body
func NewCreateActivityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivityStatisticsRequest generates requests for GetActivityStatistics
func NewGetActivityStatisticsRequest(server string, params *GetActivityStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, params.AlbumId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteActivityRequest generates requests for DeleteActivity
func NewDeleteActivityRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllAlbumsRequest generates requests for GetAllAlbums
func NewGetAllAlbumsRequest(server string, params *GetAllAlbumsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AssetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assetId", runtime.ParamLocationQuery, *params.AssetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shared != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shared", runtime.ParamLocationQuery, *params.Shared); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlbumRequest calls the generic CreateAlbum builder with application/json body
func NewCreateAlbumRequest(server string, body CreateAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlbumRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAlbumRequestWithBody generates requests for CreateAlbum with any type of body
func NewCreateAlbumRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlbumCountRequest generates requests for GetAlbumCount
func NewGetAlbumCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAlbumRequest generates requests for DeleteAlbum
func NewDeleteAlbumRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlbumInfoRequest generates requests for GetAlbumInfo
func NewGetAlbumInfoRequest(server string, id openapi_types.UUID, params *GetAlbumInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutAssets != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withoutAssets", runtime.ParamLocationQuery, *params.WithoutAssets); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlbumInfoRequest calls the generic UpdateAlbumInfo builder with application/json body
func NewUpdateAlbumInfoRequest(server string, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlbumInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAlbumInfoRequestWithBody generates requests for UpdateAlbumInfo with any type of body
func NewUpdateAlbumInfoRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAssetFromAlbumRequest calls the generic RemoveAssetFromAlbum builder with application/json body
func NewRemoveAssetFromAlbumRequest(server string, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveAssetFromAlbumRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRemoveAssetFromAlbumRequestWithBody generates requests for RemoveAssetFromAlbum with any type of body
func NewRemoveAssetFromAlbumRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddAssetsToAlbumRequest calls the generic AddAssetsToAlbum builder with application/json body
func NewAddAssetsToAlbumRequest(server string, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAssetsToAlbumRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddAssetsToAlbumRequestWithBody generates requests for AddAssetsToAlbum with any type of body
func NewAddAssetsToAlbumRequestWithBody(server string, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserFromAlbumRequest generates requests for RemoveUserFromAlbum
func NewRemoveUserFromAlbumRequest(server string, id openapi_types.UUID, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlbumUserRequest calls the generic UpdateAlbumUser builder with application/json body
func NewUpdateAlbumUserRequest(server string, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlbumUserRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewUpdateAlbumUserRequestWithBody generates requests for UpdateAlbumUser with any type of body
func NewUpdateAlbumUserRequestWithBody(server string, id openapi_types.UUID, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUsersToAlbumRequest calls the generic AddUsersToAlbum builder with application/json body
func NewAddUsersToAlbumRequest(server string, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUsersToAlbumRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddUsersToAlbumRequestWithBody generates requests for AddUsersToAlbum with any type of body
func NewAddUsersToAlbumRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiKeysRequest generates requests for GetApiKeys
func NewGetApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyRequest calls the generic CreateApiKey builder with application/json body
func NewCreateApiKeyRequest(server string, body CreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApiKeyRequestWithBody generates requests for CreateApiKey with any type of body
func NewCreateApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyRequest generates requests for DeleteApiKey
func NewDeleteApiKeyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiKeyRequest calls the generic UpdateApiKey builder with application/json body
func NewUpdateApiKeyRequest(server string, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiKeyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateApiKeyRequestWithBody generates requests for UpdateApiKey with any type of body
func NewUpdateApiKeyRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssetsRequest calls the generic DeleteAssets builder with application/json body
func NewDeleteAssetsRequest(server string, body DeleteAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAssetsRequestWithBody generates requests for DeleteAssets with any type of body
func NewDeleteAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAssetsRequest generates requests for GetAllAssets
func NewGetAllAssetsRequest(server string, params *GetAllAssetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "if-none-match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("if-none-match", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateAssetsRequest calls the generic UpdateAssets builder with application/json body
func NewUpdateAssetsRequest(server string, body UpdateAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAssetsRequestWithBody generates requests for UpdateAssets with any type of body
func NewUpdateAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckBulkUploadRequest calls the generic CheckBulkUpload builder with application/json body
func NewCheckBulkUploadRequest(server string, body CheckBulkUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckBulkUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckBulkUploadRequestWithBody generates requests for CheckBulkUpload with any type of body
func NewCheckBulkUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/bulk-upload-check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllUserAssetsByDeviceIdRequest generates requests for GetAllUserAssetsByDeviceId
func NewGetAllUserAssetsByDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckExistingAssetsRequest calls the generic CheckExistingAssets builder with application/json body
func NewCheckExistingAssetsRequest(server string, body CheckExistingAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckExistingAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckExistingAssetsRequestWithBody generates requests for CheckExistingAssets with any type of body
func NewCheckExistingAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/exist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServeFileRequest generates requests for ServeFile
func NewServeFileRequest(server string, id openapi_types.UUID, params *ServeFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/file/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsThumb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isThumb", runtime.ParamLocationQuery, *params.IsThumb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsWeb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isWeb", runtime.ParamLocationQuery, *params.IsWeb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunAssetJobsRequest calls the generic RunAssetJobs builder with application/json body
func NewRunAssetJobsRequest(server string, body RunAssetJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunAssetJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewRunAssetJobsRequestWithBody generates requests for RunAssetJobs with any type of body
func NewRunAssetJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMapMarkersRequest generates requests for GetMapMarkers
func NewGetMapMarkersRequest(server string, params *GetMapMarkersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/map-marker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FileCreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileCreatedAfter", runtime.ParamLocationQuery, *params.FileCreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FileCreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fileCreatedBefore", runtime.ParamLocationQuery, *params.FileCreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemoryLaneRequest generates requests for GetMemoryLane
func NewGetMemoryLaneRequest(server string, params *GetMemoryLaneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/memory-lane")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "day", runtime.ParamLocationQuery, params.Day); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRandomRequest generates requests for GetRandom
func NewGetRandomRequest(server string, params *GetRandomParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStackParentRequest calls the generic UpdateStackParent builder with application/json body
func NewUpdateStackParentRequest(server string, body UpdateStackParentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStackParentRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateStackParentRequestWithBody generates requests for UpdateStackParent with any type of body
func NewUpdateStackParentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/stack/parent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetStatisticsRequest generates requests for GetAssetStatistics
func NewGetAssetStatisticsRequest(server string, params *GetAssetStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssetThumbnailRequest generates requests for GetAssetThumbnail
func NewGetAssetThumbnailRequest(server string, id openapi_types.UUID, params *GetAssetThumbnailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/thumbnail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadFileRequestWithBody generates requests for UploadFile with any type of body
func NewUploadFileRequestWithBody(server string, params *UploadFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XImmichChecksum != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-immich-checksum", runtime.ParamLocationHeader, *params.XImmichChecksum)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-immich-checksum", headerParam0)
		}

	}

	return req, nil
}

// NewGetAssetInfoRequest generates requests for GetAssetInfo
func NewGetAssetInfoRequest(server string, id openapi_types.UUID, params *GetAssetInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAssetRequest calls the generic UpdateAsset builder with application/json body
func NewUpdateAssetRequest(server string, id openapi_types.UUID, body UpdateAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAssetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAssetRequestWithBody generates requests for UpdateAsset with any type of body
func NewUpdateAssetRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/asset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuditDeletesRequest generates requests for GetAuditDeletes
func NewGetAuditDeletesRequest(server string, params *GetAuditDeletesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audit/deletes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityType", runtime.ParamLocationQuery, params.EntityType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSignUpAdminRequest calls the generic SignUpAdmin builder with application/json body
func NewSignUpAdminRequest(server string, body SignUpAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignUpAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewSignUpAdminRequestWithBody generates requests for SignUpAdmin with any type of body
func NewSignUpAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/admin-sign-up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangePasswordRequest calls the generic ChangePassword builder with application/json body
func NewChangePasswordRequest(server string, body ChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordRequestWithBody generates requests for ChangePassword with any type of body
func NewChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateAccessTokenRequest generates requests for ValidateAccessToken
func NewValidateAccessTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/validateToken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadArchiveRequest calls the generic DownloadArchive builder with application/json body
func NewDownloadArchiveRequest(server string, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDownloadArchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDownloadArchiveRequestWithBody generates requests for DownloadArchive with any type of body
func NewDownloadArchiveRequestWithBody(server string, params *DownloadArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDownloadFileRequest generates requests for DownloadFile
func NewDownloadFileRequest(server string, id openapi_types.UUID, params *DownloadFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/asset/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDownloadInfoRequest calls the generic GetDownloadInfo builder with application/json body
func NewGetDownloadInfoRequest(server string, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDownloadInfoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetDownloadInfoRequestWithBody generates requests for GetDownloadInfo with any type of body
func NewGetDownloadInfoRequestWithBody(server string, params *GetDownloadInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/download/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFacesRequest generates requests for GetFaces
func NewGetFacesRequest(server string, params *GetFacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/face")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReassignFacesByIdRequest calls the generic ReassignFacesById builder with application/json body
func NewReassignFacesByIdRequest(server string, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReassignFacesByIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReassignFacesByIdRequestWithBody generates requests for ReassignFacesById with any type of body
func NewReassignFacesByIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/face/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllJobsStatusRequest generates requests for GetAllJobsStatus
func NewGetAllJobsStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendJobCommandRequest calls the generic SendJobCommand builder with application/json body
func NewSendJobCommandRequest(server string, id JobName, body SendJobCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendJobCommandRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSendJobCommandRequestWithBody generates requests for SendJobCommand with any type of body
func NewSendJobCommandRequestWithBody(server string, id JobName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllLibrariesRequest generates requests for GetAllLibraries
func NewGetAllLibrariesRequest(server string, params *GetAllLibrariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLibraryRequest calls the generic CreateLibrary builder with application/json body
func NewCreateLibraryRequest(server string, body CreateLibraryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLibraryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLibraryRequestWithBody generates requests for CreateLibrary with any type of body
func NewCreateLibraryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLibraryRequest generates requests for DeleteLibrary
func NewDeleteLibraryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLibraryRequest generates requests for GetLibrary
func NewGetLibraryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLibraryRequest calls the generic UpdateLibrary builder with application/json body
func NewUpdateLibraryRequest(server string, id openapi_types.UUID, body UpdateLibraryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLibraryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateLibraryRequestWithBody generates requests for UpdateLibrary with any type of body
func NewUpdateLibraryRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveOfflineFilesRequest generates requests for RemoveOfflineFiles
func NewRemoveOfflineFilesRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s/removeOffline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScanLibraryRequest calls the generic ScanLibrary builder with application/json body
func NewScanLibraryRequest(server string, id openapi_types.UUID, body ScanLibraryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScanLibraryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewScanLibraryRequestWithBody generates requests for ScanLibrary with any type of body
func NewScanLibraryRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s/scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLibraryStatisticsRequest generates requests for GetLibraryStatistics
func NewGetLibraryStatisticsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateRequest calls the generic Validate builder with application/json body
func NewValidateRequest(server string, id openapi_types.UUID, body ValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewValidateRequestWithBody generates requests for Validate with any type of body
func NewValidateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchMemoriesRequest generates requests for SearchMemories
func NewSearchMemoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMemoryRequest calls the generic CreateMemory builder with application/json body
func NewCreateMemoryRequest(server string, body CreateMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMemoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMemoryRequestWithBody generates requests for CreateMemory with any type of body
func NewCreateMemoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMemoryRequest generates requests for DeleteMemory
func NewDeleteMemoryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMemoryRequest generates requests for GetMemory
func NewGetMemoryRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMemoryRequest calls the generic UpdateMemory builder with application/json body
func NewUpdateMemoryRequest(server string, id openapi_types.UUID, body UpdateMemoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMemoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateMemoryRequestWithBody generates requests for UpdateMemory with any type of body
func NewUpdateMemoryRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMemoryAssetsRequest calls the generic RemoveMemoryAssets builder with application/json body
func NewRemoveMemoryAssetsRequest(server string, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMemoryAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRemoveMemoryAssetsRequestWithBody generates requests for RemoveMemoryAssets with any type of body
func NewRemoveMemoryAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMemoryAssetsRequest calls the generic AddMemoryAssets builder with application/json body
func NewAddMemoryAssetsRequest(server string, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMemoryAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddMemoryAssetsRequestWithBody generates requests for AddMemoryAssets with any type of body
func NewAddMemoryAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/memories/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartOAuthRequest calls the generic StartOAuth builder with application/json body
func NewStartOAuthRequest(server string, body StartOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewStartOAuthRequestWithBody generates requests for StartOAuth with any type of body
func NewStartOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinishOAuthRequest calls the generic FinishOAuth builder with application/json body
func NewFinishOAuthRequest(server string, body FinishOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinishOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewFinishOAuthRequestWithBody generates requests for FinishOAuth with any type of body
func NewFinishOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLinkOAuthAccountRequest calls the generic LinkOAuthAccount builder with application/json body
func NewLinkOAuthAccountRequest(server string, body LinkOAuthAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLinkOAuthAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewLinkOAuthAccountRequestWithBody generates requests for LinkOAuthAccount with any type of body
func NewLinkOAuthAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRedirectOAuthToMobileRequest generates requests for RedirectOAuthToMobile
func NewRedirectOAuthToMobileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/mobile-redirect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnlinkOAuthAccountRequest generates requests for UnlinkOAuthAccount
func NewUnlinkOAuthAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/unlink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPartnersRequest generates requests for GetPartners
func NewGetPartnersRequest(server string, params *GetPartnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemovePartnerRequest generates requests for RemovePartner
func NewRemovePartnerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePartnerRequest generates requests for CreatePartner
func NewCreatePartnerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePartnerRequest calls the generic UpdatePartner builder with application/json body
func NewUpdatePartnerRequest(server string, id openapi_types.UUID, body UpdatePartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePartnerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePartnerRequestWithBody generates requests for UpdatePartner with any type of body
func NewUpdatePartnerRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllPeopleRequest generates requests for GetAllPeople
func NewGetAllPeopleRequest(server string, params *GetAllPeopleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withHidden", runtime.ParamLocationQuery, *params.WithHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePersonRequest calls the generic CreatePerson builder with application/json body
func NewCreatePersonRequest(server string, body CreatePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePersonRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePersonRequestWithBody generates requests for CreatePerson with any type of body
func NewCreatePersonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePeopleRequest calls the generic UpdatePeople builder with application/json body
func NewUpdatePeopleRequest(server string, body UpdatePeopleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePeopleRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePeopleRequestWithBody generates requests for UpdatePeople with any type of body
func NewUpdatePeopleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersonRequest generates requests for GetPerson
func NewGetPersonRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePersonRequest calls the generic UpdatePerson builder with application/json body
func NewUpdatePersonRequest(server string, id openapi_types.UUID, body UpdatePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePersonRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePersonRequestWithBody generates requests for UpdatePerson with any type of body
func NewUpdatePersonRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersonAssetsRequest generates requests for GetPersonAssets
func NewGetPersonAssetsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMergePersonRequest calls the generic MergePerson builder with application/json body
func NewMergePersonRequest(server string, id openapi_types.UUID, body MergePersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMergePersonRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMergePersonRequestWithBody generates requests for MergePerson with any type of body
func NewMergePersonRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s/merge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReassignFacesRequest calls the generic ReassignFaces builder with application/json body
func NewReassignFacesRequest(server string, id openapi_types.UUID, body ReassignFacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReassignFacesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReassignFacesRequestWithBody generates requests for ReassignFaces with any type of body
func NewReassignFacesRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s/reassign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPersonStatisticsRequest generates requests for GetPersonStatistics
func NewGetPersonStatisticsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s/statistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersonThumbnailRequest generates requests for GetPersonThumbnail
func NewGetPersonThumbnailRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/person/%s/thumbnail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuditFilesRequest generates requests for GetAuditFiles
func NewGetAuditFilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFileChecksumsRequest calls the generic GetFileChecksums builder with application/json body
func NewGetFileChecksumsRequest(server string, body GetFileChecksumsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFileChecksumsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetFileChecksumsRequestWithBody generates requests for GetFileChecksums with any type of body
func NewGetFileChecksumsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/report/checksum")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFixAuditFilesRequest calls the generic FixAuditFiles builder with application/json body
func NewFixAuditFilesRequest(server string, body FixAuditFilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFixAuditFilesRequestWithBody(server, "application/json", bodyReader)
}

// NewFixAuditFilesRequestWithBody generates requests for FixAuditFiles with any type of body
func NewFixAuditFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/report/fix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetsByCityRequest generates requests for GetAssetsByCity
func NewGetAssetsByCityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/cities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExploreDataRequest generates requests for GetExploreData
func NewGetExploreDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/explore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchMetadataRequest calls the generic SearchMetadata builder with application/json body
func NewSearchMetadataRequest(server string, body SearchMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchMetadataRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchMetadataRequestWithBody generates requests for SearchMetadata with any type of body
func NewSearchMetadataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchPersonRequest generates requests for SearchPerson
func NewSearchPersonRequest(server string, params *SearchPersonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WithHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withHidden", runtime.ParamLocationQuery, *params.WithHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchPlacesRequest generates requests for SearchPlaces
func NewSearchPlacesRequest(server string, params *SearchPlacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSmartRequest calls the generic SearchSmart builder with application/json body
func NewSearchSmartRequest(server string, body SearchSmartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchSmartRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchSmartRequestWithBody generates requests for SearchSmart with any type of body
func NewSearchSmartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/smart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchSuggestionsRequest generates requests for GetSearchSuggestions
func NewGetSearchSuggestionsRequest(server string, params *GetSearchSuggestionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/suggestions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Make != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "make", runtime.ParamLocationQuery, *params.Make); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Model != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, *params.Model); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerInfoRequest generates requests for GetServerInfo
func NewGetServerInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerConfigRequest generates requests for GetServerConfig
func NewGetServerConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerFeaturesRequest generates requests for GetServerFeatures
func NewGetServerFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportedMediaTypesRequest generates requests for GetSupportedMediaTypes
func NewGetSupportedMediaTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/media-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingServerRequest generates requests for PingServer
func NewPingServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerStatisticsRequest generates requests for GetServerStatistics
func NewGetServerStatisticsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThemeRequest generates requests for GetTheme
func NewGetThemeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/theme")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerVersionRequest generates requests for GetServerVersion
func NewGetServerVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server-info/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAllSessionsRequest generates requests for DeleteAllSessions
func NewDeleteAllSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsRequest generates requests for GetSessions
func NewGetSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSessionRequest generates requests for DeleteSession
func NewDeleteSessionRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSharedLinksRequest generates requests for GetAllSharedLinks
func NewGetAllSharedLinksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSharedLinkRequest calls the generic CreateSharedLink builder with application/json body
func NewCreateSharedLinkRequest(server string, body CreateSharedLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSharedLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSharedLinkRequestWithBody generates requests for CreateSharedLink with any type of body
func NewCreateSharedLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMySharedLinkRequest generates requests for GetMySharedLink
func NewGetMySharedLinkRequest(server string, params *GetMySharedLinkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveSharedLinkRequest generates requests for RemoveSharedLink
func NewRemoveSharedLinkRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharedLinkByIdRequest generates requests for GetSharedLinkById
func NewGetSharedLinkByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSharedLinkRequest calls the generic UpdateSharedLink builder with application/json body
func NewUpdateSharedLinkRequest(server string, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSharedLinkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSharedLinkRequestWithBody generates requests for UpdateSharedLink with any type of body
func NewUpdateSharedLinkRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSharedLinkAssetsRequest calls the generic RemoveSharedLinkAssets builder with application/json body
func NewRemoveSharedLinkAssetsRequest(server string, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveSharedLinkAssetsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewRemoveSharedLinkAssetsRequestWithBody generates requests for RemoveSharedLinkAssets with any type of body
func NewRemoveSharedLinkAssetsRequestWithBody(server string, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddSharedLinkAssetsRequest calls the generic AddSharedLinkAssets builder with application/json body
func NewAddSharedLinkAssetsRequest(server string, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSharedLinkAssetsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddSharedLinkAssetsRequestWithBody generates requests for AddSharedLinkAssets with any type of body
func NewAddSharedLinkAssetsRequestWithBody(server string, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-link/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeltaSyncRequest calls the generic GetDeltaSync builder with application/json body
func NewGetDeltaSyncRequest(server string, body GetDeltaSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDeltaSyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDeltaSyncRequestWithBody generates requests for GetDeltaSync with any type of body
func NewGetDeltaSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/delta-sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFullSyncForUserRequest calls the generic GetFullSyncForUser builder with application/json body
func NewGetFullSyncForUserRequest(server string, body GetFullSyncForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFullSyncForUserRequestWithBody(server, "application/json", bodyReader)
}

// NewGetFullSyncForUserRequestWithBody generates requests for GetFullSyncForUser with any type of body
func NewGetFullSyncForUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync/full-sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConfigRequest calls the generic UpdateConfig builder with application/json body
func NewUpdateConfigRequest(server string, body UpdateConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConfigRequestWithBody generates requests for UpdateConfig with any type of body
func NewUpdateConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConfigDefaultsRequest generates requests for GetConfigDefaults
func NewGetConfigDefaultsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config/defaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapStyleRequest generates requests for GetMapStyle
func NewGetMapStyleRequest(server string, params *GetMapStyleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config/map/style.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "theme", runtime.ParamLocationQuery, params.Theme); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageTemplateOptionsRequest generates requests for GetStorageTemplateOptions
func NewGetStorageTemplateOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-config/storage-template-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminOnboardingRequest generates requests for GetAdminOnboarding
func NewGetAdminOnboardingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/admin-onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAdminOnboardingRequest calls the generic UpdateAdminOnboarding builder with application/json body
func NewUpdateAdminOnboardingRequest(server string, body UpdateAdminOnboardingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAdminOnboardingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAdminOnboardingRequestWithBody generates requests for UpdateAdminOnboarding with any type of body
func NewUpdateAdminOnboardingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/admin-onboarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReverseGeocodingStateRequest generates requests for GetReverseGeocodingState
func NewGetReverseGeocodingStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system-metadata/reverse-geocoding-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTagsRequest generates requests for GetAllTags
func NewGetAllTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagByIdRequest generates requests for GetTagById
func NewGetTagByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTagRequest calls the generic UpdateTag builder with application/json body
func NewUpdateTagRequest(server string, id openapi_types.UUID, body UpdateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTagRequestWithBody generates requests for UpdateTag with any type of body
func NewUpdateTagRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUntagAssetsRequest calls the generic UntagAssets builder with application/json body
func NewUntagAssetsRequest(server string, id openapi_types.UUID, body UntagAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUntagAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUntagAssetsRequestWithBody generates requests for UntagAssets with any type of body
func NewUntagAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagAssetsRequest generates requests for GetTagAssets
func NewGetTagAssetsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTagAssetsRequest calls the generic TagAssets builder with application/json body
func NewTagAssetsRequest(server string, id openapi_types.UUID, body TagAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTagAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTagAssetsRequestWithBody generates requests for TagAssets with any type of body
func NewTagAssetsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimeBucketRequest generates requests for GetTimeBucket
func NewGetTimeBucketRequest(server string, params *GetTimeBucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AlbumId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, *params.AlbumId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personId", runtime.ParamLocationQuery, *params.PersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeBucket", runtime.ParamLocationQuery, params.TimeBucket); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithStacked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withStacked", runtime.ParamLocationQuery, *params.WithStacked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeBucketsRequest generates requests for GetTimeBuckets
func NewGetTimeBucketsRequest(server string, params *GetTimeBucketsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timeline/buckets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AlbumId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "albumId", runtime.ParamLocationQuery, *params.AlbumId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsFavorite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isFavorite", runtime.ParamLocationQuery, *params.IsFavorite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTrashed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTrashed", runtime.ParamLocationQuery, *params.IsTrashed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personId", runtime.ParamLocationQuery, *params.PersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithPartners != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withPartners", runtime.ParamLocationQuery, *params.WithPartners); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithStacked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withStacked", runtime.ParamLocationQuery, *params.WithStacked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmptyTrashRequest generates requests for EmptyTrash
func NewEmptyTrashRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/empty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreTrashRequest generates requests for RestoreTrash
func NewRestoreTrashRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/restore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreAssetsRequest calls the generic RestoreAssets builder with application/json body
func NewRestoreAssetsRequest(server string, body RestoreAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewRestoreAssetsRequestWithBody generates requests for RestoreAssets with any type of body
func NewRestoreAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trash/restore/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllUsersRequest generates requests for GetAllUsers
func NewGetAllUsersRequest(server string, params *GetAllUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isAll", runtime.ParamLocationQuery, params.IsAll); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserByIdRequest generates requests for GetUserById
func NewGetUserByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyUserInfoRequest generates requests for GetMyUserInfo
func NewGetMyUserInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProfileImageRequest generates requests for DeleteProfileImage
func NewDeleteProfileImageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProfileImageRequestWithBody generates requests for CreateProfileImage with any type of body
func NewCreateProfileImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile-image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProfileImageRequest generates requests for GetProfileImage
func NewGetProfileImageRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile-image/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest calls the generic DeleteUser builder with application/json body
func NewDeleteUserRequest(server string, id openapi_types.UUID, body DeleteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteUserRequestWithBody generates requests for DeleteUser with any type of body
func NewDeleteUserRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestoreUserRequest generates requests for RestoreUser
func NewRestoreUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetActivitiesWithResponse request
	GetActivitiesWithResponse(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error)

	// CreateActivityWithBodyWithResponse request with any body
	CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error)

	// GetActivityStatisticsWithResponse request
	GetActivityStatisticsWithResponse(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*GetActivityStatisticsResponse, error)

	// DeleteActivityWithResponse request
	DeleteActivityWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error)

	// GetAllAlbumsWithResponse request
	GetAllAlbumsWithResponse(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*GetAllAlbumsResponse, error)

	// CreateAlbumWithBodyWithResponse request with any body
	CreateAlbumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error)

	CreateAlbumWithResponse(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error)

	// GetAlbumCountWithResponse request
	GetAlbumCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlbumCountResponse, error)

	// DeleteAlbumWithResponse request
	DeleteAlbumWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAlbumResponse, error)

	// GetAlbumInfoWithResponse request
	GetAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*GetAlbumInfoResponse, error)

	// UpdateAlbumInfoWithBodyWithResponse request with any body
	UpdateAlbumInfoWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error)

	UpdateAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error)

	// RemoveAssetFromAlbumWithBodyWithResponse request with any body
	RemoveAssetFromAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error)

	RemoveAssetFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error)

	// AddAssetsToAlbumWithBodyWithResponse request with any body
	AddAssetsToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error)

	AddAssetsToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error)

	// RemoveUserFromAlbumWithResponse request
	RemoveUserFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromAlbumResponse, error)

	// UpdateAlbumUserWithBodyWithResponse request with any body
	UpdateAlbumUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error)

	UpdateAlbumUserWithResponse(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error)

	// AddUsersToAlbumWithBodyWithResponse request with any body
	AddUsersToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error)

	AddUsersToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error)

	// GetApiKeysWithResponse request
	GetApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error)

	// CreateApiKeyWithBodyWithResponse request with any body
	CreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	CreateApiKeyWithResponse(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	// DeleteApiKeyWithResponse request
	DeleteApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// UpdateApiKeyWithBodyWithResponse request with any body
	UpdateApiKeyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	UpdateApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	// DeleteAssetsWithBodyWithResponse request with any body
	DeleteAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error)

	DeleteAssetsWithResponse(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error)

	// GetAllAssetsWithResponse request
	GetAllAssetsWithResponse(ctx context.Context, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*GetAllAssetsResponse, error)

	// UpdateAssetsWithBodyWithResponse request with any body
	UpdateAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error)

	UpdateAssetsWithResponse(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error)

	// CheckBulkUploadWithBodyWithResponse request with any body
	CheckBulkUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error)

	CheckBulkUploadWithResponse(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error)

	// GetAllUserAssetsByDeviceIdWithResponse request
	GetAllUserAssetsByDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetAllUserAssetsByDeviceIdResponse, error)

	// CheckExistingAssetsWithBodyWithResponse request with any body
	CheckExistingAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error)

	CheckExistingAssetsWithResponse(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error)

	// ServeFileWithResponse request
	ServeFileWithResponse(ctx context.Context, id openapi_types.UUID, params *ServeFileParams, reqEditors ...RequestEditorFn) (*ServeFileResponse, error)

	// RunAssetJobsWithBodyWithResponse request with any body
	RunAssetJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error)

	RunAssetJobsWithResponse(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error)

	// GetMapMarkersWithResponse request
	GetMapMarkersWithResponse(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*GetMapMarkersResponse, error)

	// GetMemoryLaneWithResponse request
	GetMemoryLaneWithResponse(ctx context.Context, params *GetMemoryLaneParams, reqEditors ...RequestEditorFn) (*GetMemoryLaneResponse, error)

	// GetRandomWithResponse request
	GetRandomWithResponse(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*GetRandomResponse, error)

	// UpdateStackParentWithBodyWithResponse request with any body
	UpdateStackParentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStackParentResponse, error)

	UpdateStackParentWithResponse(ctx context.Context, body UpdateStackParentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStackParentResponse, error)

	// GetAssetStatisticsWithResponse request
	GetAssetStatisticsWithResponse(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*GetAssetStatisticsResponse, error)

	// GetAssetThumbnailWithResponse request
	GetAssetThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetThumbnailParams, reqEditors ...RequestEditorFn) (*GetAssetThumbnailResponse, error)

	// UploadFileWithBodyWithResponse request with any body
	UploadFileWithBodyWithResponse(ctx context.Context, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error)

	// GetAssetInfoWithResponse request
	GetAssetInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error)

	// UpdateAssetWithBodyWithResponse request with any body
	UpdateAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	UpdateAssetWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	// GetAuditDeletesWithResponse request
	GetAuditDeletesWithResponse(ctx context.Context, params *GetAuditDeletesParams, reqEditors ...RequestEditorFn) (*GetAuditDeletesResponse, error)

	// SignUpAdminWithBodyWithResponse request with any body
	SignUpAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error)

	SignUpAdminWithResponse(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error)

	// ChangePasswordWithBodyWithResponse request with any body
	ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// ValidateAccessTokenWithResponse request
	ValidateAccessTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateAccessTokenResponse, error)

	// DownloadArchiveWithBodyWithResponse request with any body
	DownloadArchiveWithBodyWithResponse(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error)

	DownloadArchiveWithResponse(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error)

	// DownloadFileWithResponse request
	DownloadFileWithResponse(ctx context.Context, id openapi_types.UUID, params *DownloadFileParams, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error)

	// GetDownloadInfoWithBodyWithResponse request with any body
	GetDownloadInfoWithBodyWithResponse(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error)

	GetDownloadInfoWithResponse(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error)

	// GetFacesWithResponse request
	GetFacesWithResponse(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*GetFacesResponse, error)

	// ReassignFacesByIdWithBodyWithResponse request with any body
	ReassignFacesByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error)

	ReassignFacesByIdWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error)

	// GetAllJobsStatusWithResponse request
	GetAllJobsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllJobsStatusResponse, error)

	// SendJobCommandWithBodyWithResponse request with any body
	SendJobCommandWithBodyWithResponse(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error)

	SendJobCommandWithResponse(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error)

	// GetAllLibrariesWithResponse request
	GetAllLibrariesWithResponse(ctx context.Context, params *GetAllLibrariesParams, reqEditors ...RequestEditorFn) (*GetAllLibrariesResponse, error)

	// CreateLibraryWithBodyWithResponse request with any body
	CreateLibraryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error)

	CreateLibraryWithResponse(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error)

	// DeleteLibraryWithResponse request
	DeleteLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLibraryResponse, error)

	// GetLibraryWithResponse request
	GetLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error)

	// UpdateLibraryWithBodyWithResponse request with any body
	UpdateLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error)

	UpdateLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error)

	// RemoveOfflineFilesWithResponse request
	RemoveOfflineFilesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveOfflineFilesResponse, error)

	// ScanLibraryWithBodyWithResponse request with any body
	ScanLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error)

	ScanLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body ScanLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error)

	// GetLibraryStatisticsWithResponse request
	GetLibraryStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryStatisticsResponse, error)

	// ValidateWithBodyWithResponse request with any body
	ValidateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	ValidateWithResponse(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	// SearchMemoriesWithResponse request
	SearchMemoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchMemoriesResponse, error)

	// CreateMemoryWithBodyWithResponse request with any body
	CreateMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error)

	CreateMemoryWithResponse(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error)

	// DeleteMemoryWithResponse request
	DeleteMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMemoryResponse, error)

	// GetMemoryWithResponse request
	GetMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMemoryResponse, error)

	// UpdateMemoryWithBodyWithResponse request with any body
	UpdateMemoryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error)

	UpdateMemoryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error)

	// RemoveMemoryAssetsWithBodyWithResponse request with any body
	RemoveMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error)

	RemoveMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error)

	// AddMemoryAssetsWithBodyWithResponse request with any body
	AddMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error)

	AddMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error)

	// StartOAuthWithBodyWithResponse request with any body
	StartOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error)

	StartOAuthWithResponse(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error)

	// FinishOAuthWithBodyWithResponse request with any body
	FinishOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error)

	FinishOAuthWithResponse(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error)

	// LinkOAuthAccountWithBodyWithResponse request with any body
	LinkOAuthAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error)

	LinkOAuthAccountWithResponse(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error)

	// RedirectOAuthToMobileWithResponse request
	RedirectOAuthToMobileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RedirectOAuthToMobileResponse, error)

	// UnlinkOAuthAccountWithResponse request
	UnlinkOAuthAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnlinkOAuthAccountResponse, error)

	// GetPartnersWithResponse request
	GetPartnersWithResponse(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*GetPartnersResponse, error)

	// RemovePartnerWithResponse request
	RemovePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemovePartnerResponse, error)

	// CreatePartnerWithResponse request
	CreatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreatePartnerResponse, error)

	// UpdatePartnerWithBodyWithResponse request with any body
	UpdatePartnerWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error)

	UpdatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error)

	// GetAllPeopleWithResponse request
	GetAllPeopleWithResponse(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*GetAllPeopleResponse, error)

	// CreatePersonWithBodyWithResponse request with any body
	CreatePersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error)

	CreatePersonWithResponse(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error)

	// UpdatePeopleWithBodyWithResponse request with any body
	UpdatePeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error)

	UpdatePeopleWithResponse(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error)

	// GetPersonWithResponse request
	GetPersonWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonResponse, error)

	// UpdatePersonWithBodyWithResponse request with any body
	UpdatePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error)

	UpdatePersonWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error)

	// GetPersonAssetsWithResponse request
	GetPersonAssetsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonAssetsResponse, error)

	// MergePersonWithBodyWithResponse request with any body
	MergePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergePersonResponse, error)

	MergePersonWithResponse(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*MergePersonResponse, error)

	// ReassignFacesWithBodyWithResponse request with any body
	ReassignFacesWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error)

	ReassignFacesWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error)

	// GetPersonStatisticsWithResponse request
	GetPersonStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonStatisticsResponse, error)

	// GetPersonThumbnailWithResponse request
	GetPersonThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonThumbnailResponse, error)

	// GetAuditFilesWithResponse request
	GetAuditFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditFilesResponse, error)

	// GetFileChecksumsWithBodyWithResponse request with any body
	GetFileChecksumsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFileChecksumsResponse, error)

	GetFileChecksumsWithResponse(ctx context.Context, body GetFileChecksumsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFileChecksumsResponse, error)

	// FixAuditFilesWithBodyWithResponse request with any body
	FixAuditFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FixAuditFilesResponse, error)

	FixAuditFilesWithResponse(ctx context.Context, body FixAuditFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*FixAuditFilesResponse, error)

	// GetAssetsByCityWithResponse request
	GetAssetsByCityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetsByCityResponse, error)

	// GetExploreDataWithResponse request
	GetExploreDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExploreDataResponse, error)

	// SearchMetadataWithBodyWithResponse request with any body
	SearchMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchMetadataResponse, error)

	SearchMetadataWithResponse(ctx context.Context, body SearchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchMetadataResponse, error)

	// SearchPersonWithResponse request
	SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error)

	// SearchPlacesWithResponse request
	SearchPlacesWithResponse(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*SearchPlacesResponse, error)

	// SearchSmartWithBodyWithResponse request with any body
	SearchSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error)

	SearchSmartWithResponse(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error)

	// GetSearchSuggestionsWithResponse request
	GetSearchSuggestionsWithResponse(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsResponse, error)

	// GetServerInfoWithResponse request
	GetServerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerInfoResponse, error)

	// GetServerConfigWithResponse request
	GetServerConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error)

	// GetServerFeaturesWithResponse request
	GetServerFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerFeaturesResponse, error)

	// GetSupportedMediaTypesWithResponse request
	GetSupportedMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedMediaTypesResponse, error)

	// PingServerWithResponse request
	PingServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingServerResponse, error)

	// GetServerStatisticsWithResponse request
	GetServerStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerStatisticsResponse, error)

	// GetThemeWithResponse request
	GetThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetThemeResponse, error)

	// GetServerVersionWithResponse request
	GetServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerVersionResponse, error)

	// DeleteAllSessionsWithResponse request
	DeleteAllSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllSessionsResponse, error)

	// GetSessionsWithResponse request
	GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error)

	// DeleteSessionWithResponse request
	DeleteSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error)

	// GetAllSharedLinksWithResponse request
	GetAllSharedLinksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSharedLinksResponse, error)

	// CreateSharedLinkWithBodyWithResponse request with any body
	CreateSharedLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error)

	CreateSharedLinkWithResponse(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error)

	// GetMySharedLinkWithResponse request
	GetMySharedLinkWithResponse(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*GetMySharedLinkResponse, error)

	// RemoveSharedLinkWithResponse request
	RemoveSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveSharedLinkResponse, error)

	// GetSharedLinkByIdWithResponse request
	GetSharedLinkByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSharedLinkByIdResponse, error)

	// UpdateSharedLinkWithBodyWithResponse request with any body
	UpdateSharedLinkWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error)

	UpdateSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error)

	// RemoveSharedLinkAssetsWithBodyWithResponse request with any body
	RemoveSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error)

	RemoveSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error)

	// AddSharedLinkAssetsWithBodyWithResponse request with any body
	AddSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error)

	AddSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error)

	// GetDeltaSyncWithBodyWithResponse request with any body
	GetDeltaSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error)

	GetDeltaSyncWithResponse(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error)

	// GetFullSyncForUserWithBodyWithResponse request with any body
	GetFullSyncForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error)

	GetFullSyncForUserWithResponse(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error)

	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// UpdateConfigWithBodyWithResponse request with any body
	UpdateConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	UpdateConfigWithResponse(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	// GetConfigDefaultsWithResponse request
	GetConfigDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigDefaultsResponse, error)

	// GetMapStyleWithResponse request
	GetMapStyleWithResponse(ctx context.Context, params *GetMapStyleParams, reqEditors ...RequestEditorFn) (*GetMapStyleResponse, error)

	// GetStorageTemplateOptionsWithResponse request
	GetStorageTemplateOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageTemplateOptionsResponse, error)

	// GetAdminOnboardingWithResponse request
	GetAdminOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminOnboardingResponse, error)

	// UpdateAdminOnboardingWithBodyWithResponse request with any body
	UpdateAdminOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error)

	UpdateAdminOnboardingWithResponse(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error)

	// GetReverseGeocodingStateWithResponse request
	GetReverseGeocodingStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReverseGeocodingStateResponse, error)

	// GetAllTagsWithResponse request
	GetAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error)

	// CreateTagWithBodyWithResponse request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// DeleteTagWithResponse request
	DeleteTagWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTagByIdWithResponse request
	GetTagByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error)

	// UpdateTagWithBodyWithResponse request with any body
	UpdateTagWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	UpdateTagWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	// UntagAssetsWithBodyWithResponse request with any body
	UntagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error)

	UntagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error)

	// GetTagAssetsWithResponse request
	GetTagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagAssetsResponse, error)

	// TagAssetsWithBodyWithResponse request with any body
	TagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error)

	TagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error)

	// GetTimeBucketWithResponse request
	GetTimeBucketWithResponse(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*GetTimeBucketResponse, error)

	// GetTimeBucketsWithResponse request
	GetTimeBucketsWithResponse(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*GetTimeBucketsResponse, error)

	// EmptyTrashWithResponse request
	EmptyTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EmptyTrashResponse, error)

	// RestoreTrashWithResponse request
	RestoreTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestoreTrashResponse, error)

	// RestoreAssetsWithBodyWithResponse request with any body
	RestoreAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error)

	RestoreAssetsWithResponse(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error)

	// GetAllUsersWithResponse request
	GetAllUsersWithResponse(ctx context.Context, params *GetAllUsersParams, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// GetUserByIdWithResponse request
	GetUserByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserByIdResponse, error)

	// GetMyUserInfoWithResponse request
	GetMyUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyUserInfoResponse, error)

	// DeleteProfileImageWithResponse request
	DeleteProfileImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error)

	// CreateProfileImageWithBodyWithResponse request with any body
	CreateProfileImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileImageResponse, error)

	// GetProfileImageWithResponse request
	GetProfileImageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error)

	// DeleteUserWithBodyWithResponse request with any body
	DeleteUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	DeleteUserWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// RestoreUserWithResponse request
	RestoreUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestoreUserResponse, error)
}

type GetActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActivityResponseDto
}

// Status returns HTTPResponse.Status
func (r GetActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ActivityResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivityStatisticsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetActivityStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAlbumsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllAlbumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAlbumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumCountResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAlbumCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlbumInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAlbumInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlbumInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlbumInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateAlbumInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlbumInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAssetFromAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveAssetFromAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAssetFromAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAssetsToAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r AddAssetsToAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAssetsToAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlbumUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAlbumUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlbumUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUsersToAlbumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlbumResponseDto
}

// Status returns HTTPResponse.Status
func (r AddUsersToAlbumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUsersToAlbumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r GetApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIKeyCreateResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIKeyResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckBulkUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetBulkUploadCheckResponseDto
}

// Status returns HTTPResponse.Status
func (r CheckBulkUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckBulkUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUserAssetsByDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAllUserAssetsByDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUserAssetsByDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckExistingAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckExistingAssetsResponseDto
}

// Status returns HTTPResponse.Status
func (r CheckExistingAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckExistingAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServeFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServeFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServeFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunAssetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunAssetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunAssetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapMarkersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MapMarkerResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMapMarkersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMarkersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemoryLaneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MemoryLaneResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMemoryLaneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemoryLaneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStackParentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateStackParentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStackParentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetThumbnailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAssetThumbnailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetThumbnailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AssetFileUploadResponseDto
}

// Status returns HTTPResponse.Status
func (r UploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditDeletesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditDeletesResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAuditDeletesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditDeletesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignUpAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r SignUpAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignUpAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r ChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoginResponseDto
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogoutResponseDto
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateAccessTokenResponseDto
}

// Status returns HTTPResponse.Status
func (r ValidateAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDownloadInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DownloadResponseDto
}

// Status returns HTTPResponse.Status
func (r GetDownloadInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDownloadInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetFaceResponseDto
}

// Status returns HTTPResponse.Status
func (r GetFacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReassignFacesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r ReassignFacesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReassignFacesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllJobsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllJobStatusResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllJobsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllJobsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendJobCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobStatusDto
}

// Status returns HTTPResponse.Status
func (r SendJobCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendJobCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLibrariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllLibrariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLibrariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveOfflineFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveOfflineFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveOfflineFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScanLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ScanLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScanLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LibraryStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetLibraryStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateLibraryResponseDto
}

// Status returns HTTPResponse.Status
func (r ValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMemoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchMemoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMemoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMemoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemoryResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateMemoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMemoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMemoryAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveMemoryAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMemoryAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMemoryAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r AddMemoryAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMemoryAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OAuthAuthorizeResponseDto
}

// Status returns HTTPResponse.Status
func (r StartOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinishOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoginResponseDto
}

// Status returns HTTPResponse.Status
func (r FinishOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinishOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkOAuthAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r LinkOAuthAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkOAuthAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedirectOAuthToMobileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RedirectOAuthToMobileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedirectOAuthToMobileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlinkOAuthAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r UnlinkOAuthAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlinkOAuthAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPartnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemovePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r CreatePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PartnerResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeopleResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r CreatePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdatePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPersonAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MergePersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]BulkIdResponseDto
}

// Status returns HTTPResponse.Status
func (r MergePersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MergePersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReassignFacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r ReassignFacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReassignFacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonStatisticsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetPersonStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonThumbnailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPersonThumbnailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonThumbnailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileReportDto
}

// Status returns HTTPResponse.Status
func (r GetAuditFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileChecksumsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]FileChecksumResponseDto
}

// Status returns HTTPResponse.Status
func (r GetFileChecksumsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileChecksumsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FixAuditFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FixAuditFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FixAuditFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsByCityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAssetsByCityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsByCityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExploreDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchExploreResponseDto
}

// Status returns HTTPResponse.Status
func (r GetExploreDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExploreDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchPersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPlacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PlacesResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchPlacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPlacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResponseDto
}

// Status returns HTTPResponse.Status
func (r SearchSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSuggestionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetSearchSuggestionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSuggestionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerInfoResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerConfigDto
}

// Status returns HTTPResponse.Status
func (r GetServerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerFeaturesDto
}

// Status returns HTTPResponse.Status
func (r GetServerFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportedMediaTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerMediaTypesResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSupportedMediaTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportedMediaTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerPingResponse
}

// Status returns HTTPResponse.Status
func (r PingServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerStatsResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerThemeDto
}

// Status returns HTTPResponse.Status
func (r GetThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerVersionResponseDto
}

// Status returns HTTPResponse.Status
func (r GetServerVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAllSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SessionResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSharedLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllSharedLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSharedLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMySharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMySharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMySharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedLinkByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r GetSharedLinkByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedLinkByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSharedLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedLinkResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateSharedLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSharedLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSharedLinkAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r RemoveSharedLinkAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSharedLinkAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSharedLinkAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r AddSharedLinkAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSharedLinkAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeltaSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetDeltaSyncResponseDto
}

// Status returns HTTPResponse.Status
func (r GetDeltaSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeltaSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFullSyncForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetFullSyncForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFullSyncForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r UpdateConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigDefaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigDto
}

// Status returns HTTPResponse.Status
func (r GetConfigDefaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigDefaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapStyleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMapStyleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapStyleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageTemplateOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemConfigTemplateStorageOptionDto
}

// Status returns HTTPResponse.Status
func (r GetStorageTemplateOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageTemplateOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminOnboardingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminOnboardingUpdateDto
}

// Status returns HTTPResponse.Status
func (r GetAdminOnboardingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminOnboardingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAdminOnboardingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAdminOnboardingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAdminOnboardingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReverseGeocodingStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReverseGeocodingStateResponseDto
}

// Status returns HTTPResponse.Status
func (r GetReverseGeocodingStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReverseGeocodingStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTagByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UntagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r UntagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UntagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TagAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetIdsResponseDto
}

// Status returns HTTPResponse.Status
func (r TagAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TagAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AssetResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTimeBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimeBucketResponseDto
}

// Status returns HTTPResponse.Status
func (r GetTimeBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmptyTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EmptyTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmptyTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestoreTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestoreAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserResponseDto
}

// Status returns HTTPResponse.Status
func (r GetAllUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r GetUserByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r GetMyUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateProfileImageResponseDto
}

// Status returns HTTPResponse.Status
func (r CreateProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponseDto
}

// Status returns HTTPResponse.Status
func (r RestoreUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetActivitiesWithResponse request returning *GetActivitiesResponse
func (c *ClientWithResponses) GetActivitiesWithResponse(ctx context.Context, params *GetActivitiesParams, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error) {
	rsp, err := c.GetActivities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivitiesResponse(rsp)
}

// CreateActivityWithBodyWithResponse request with arbitrary body returning *CreateActivityResponse
func (c *ClientWithResponses) CreateActivityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

func (c *ClientWithResponses) CreateActivityWithResponse(ctx context.Context, body CreateActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateActivityResponse, error) {
	rsp, err := c.CreateActivity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateActivityResponse(rsp)
}

// GetActivityStatisticsWithResponse request returning *GetActivityStatisticsResponse
func (c *ClientWithResponses) GetActivityStatisticsWithResponse(ctx context.Context, params *GetActivityStatisticsParams, reqEditors ...RequestEditorFn) (*GetActivityStatisticsResponse, error) {
	rsp, err := c.GetActivityStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityStatisticsResponse(rsp)
}

// DeleteActivityWithResponse request returning *DeleteActivityResponse
func (c *ClientWithResponses) DeleteActivityWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error) {
	rsp, err := c.DeleteActivity(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActivityResponse(rsp)
}

// GetAllAlbumsWithResponse request returning *GetAllAlbumsResponse
func (c *ClientWithResponses) GetAllAlbumsWithResponse(ctx context.Context, params *GetAllAlbumsParams, reqEditors ...RequestEditorFn) (*GetAllAlbumsResponse, error) {
	rsp, err := c.GetAllAlbums(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAlbumsResponse(rsp)
}

// CreateAlbumWithBodyWithResponse request with arbitrary body returning *CreateAlbumResponse
func (c *ClientWithResponses) CreateAlbumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error) {
	rsp, err := c.CreateAlbumWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlbumResponse(rsp)
}

func (c *ClientWithResponses) CreateAlbumWithResponse(ctx context.Context, body CreateAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlbumResponse, error) {
	rsp, err := c.CreateAlbum(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlbumResponse(rsp)
}

// GetAlbumCountWithResponse request returning *GetAlbumCountResponse
func (c *ClientWithResponses) GetAlbumCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlbumCountResponse, error) {
	rsp, err := c.GetAlbumCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumCountResponse(rsp)
}

// DeleteAlbumWithResponse request returning *DeleteAlbumResponse
func (c *ClientWithResponses) DeleteAlbumWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAlbumResponse, error) {
	rsp, err := c.DeleteAlbum(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlbumResponse(rsp)
}

// GetAlbumInfoWithResponse request returning *GetAlbumInfoResponse
func (c *ClientWithResponses) GetAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAlbumInfoParams, reqEditors ...RequestEditorFn) (*GetAlbumInfoResponse, error) {
	rsp, err := c.GetAlbumInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlbumInfoResponse(rsp)
}

// UpdateAlbumInfoWithBodyWithResponse request with arbitrary body returning *UpdateAlbumInfoResponse
func (c *ClientWithResponses) UpdateAlbumInfoWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error) {
	rsp, err := c.UpdateAlbumInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlbumInfoWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAlbumInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumInfoResponse, error) {
	rsp, err := c.UpdateAlbumInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumInfoResponse(rsp)
}

// RemoveAssetFromAlbumWithBodyWithResponse request with arbitrary body returning *RemoveAssetFromAlbumResponse
func (c *ClientWithResponses) RemoveAssetFromAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error) {
	rsp, err := c.RemoveAssetFromAlbumWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssetFromAlbumResponse(rsp)
}

func (c *ClientWithResponses) RemoveAssetFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveAssetFromAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveAssetFromAlbumResponse, error) {
	rsp, err := c.RemoveAssetFromAlbum(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAssetFromAlbumResponse(rsp)
}

// AddAssetsToAlbumWithBodyWithResponse request with arbitrary body returning *AddAssetsToAlbumResponse
func (c *ClientWithResponses) AddAssetsToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error) {
	rsp, err := c.AddAssetsToAlbumWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAssetsToAlbumResponse(rsp)
}

func (c *ClientWithResponses) AddAssetsToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, params *AddAssetsToAlbumParams, body AddAssetsToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAssetsToAlbumResponse, error) {
	rsp, err := c.AddAssetsToAlbum(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAssetsToAlbumResponse(rsp)
}

// RemoveUserFromAlbumWithResponse request returning *RemoveUserFromAlbumResponse
func (c *ClientWithResponses) RemoveUserFromAlbumWithResponse(ctx context.Context, id openapi_types.UUID, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromAlbumResponse, error) {
	rsp, err := c.RemoveUserFromAlbum(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromAlbumResponse(rsp)
}

// UpdateAlbumUserWithBodyWithResponse request with arbitrary body returning *UpdateAlbumUserResponse
func (c *ClientWithResponses) UpdateAlbumUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error) {
	rsp, err := c.UpdateAlbumUserWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlbumUserWithResponse(ctx context.Context, id openapi_types.UUID, userId string, body UpdateAlbumUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlbumUserResponse, error) {
	rsp, err := c.UpdateAlbumUser(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlbumUserResponse(rsp)
}

// AddUsersToAlbumWithBodyWithResponse request with arbitrary body returning *AddUsersToAlbumResponse
func (c *ClientWithResponses) AddUsersToAlbumWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error) {
	rsp, err := c.AddUsersToAlbumWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToAlbumResponse(rsp)
}

func (c *ClientWithResponses) AddUsersToAlbumWithResponse(ctx context.Context, id openapi_types.UUID, body AddUsersToAlbumJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToAlbumResponse, error) {
	rsp, err := c.AddUsersToAlbum(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToAlbumResponse(rsp)
}

// GetApiKeysWithResponse request returning *GetApiKeysResponse
func (c *ClientWithResponses) GetApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiKeysResponse, error) {
	rsp, err := c.GetApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeysResponse(rsp)
}

// CreateApiKeyWithBodyWithResponse request with arbitrary body returning *CreateApiKeyResponse
func (c *ClientWithResponses) CreateApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyWithResponse(ctx context.Context, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

// DeleteApiKeyWithResponse request returning *DeleteApiKeyResponse
func (c *ClientWithResponses) DeleteApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error) {
	rsp, err := c.DeleteApiKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// UpdateApiKeyWithBodyWithResponse request with arbitrary body returning *UpdateApiKeyResponse
func (c *ClientWithResponses) UpdateApiKeyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiKeyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKey(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

// DeleteAssetsWithBodyWithResponse request with arbitrary body returning *DeleteAssetsResponse
func (c *ClientWithResponses) DeleteAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error) {
	rsp, err := c.DeleteAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetsResponse(rsp)
}

func (c *ClientWithResponses) DeleteAssetsWithResponse(ctx context.Context, body DeleteAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAssetsResponse, error) {
	rsp, err := c.DeleteAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetsResponse(rsp)
}

// GetAllAssetsWithResponse request returning *GetAllAssetsResponse
func (c *ClientWithResponses) GetAllAssetsWithResponse(ctx context.Context, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*GetAllAssetsResponse, error) {
	rsp, err := c.GetAllAssets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAssetsResponse(rsp)
}

// UpdateAssetsWithBodyWithResponse request with arbitrary body returning *UpdateAssetsResponse
func (c *ClientWithResponses) UpdateAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error) {
	rsp, err := c.UpdateAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAssetsWithResponse(ctx context.Context, body UpdateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetsResponse, error) {
	rsp, err := c.UpdateAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetsResponse(rsp)
}

// CheckBulkUploadWithBodyWithResponse request with arbitrary body returning *CheckBulkUploadResponse
func (c *ClientWithResponses) CheckBulkUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error) {
	rsp, err := c.CheckBulkUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckBulkUploadResponse(rsp)
}

func (c *ClientWithResponses) CheckBulkUploadWithResponse(ctx context.Context, body CheckBulkUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckBulkUploadResponse, error) {
	rsp, err := c.CheckBulkUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckBulkUploadResponse(rsp)
}

// GetAllUserAssetsByDeviceIdWithResponse request returning *GetAllUserAssetsByDeviceIdResponse
func (c *ClientWithResponses) GetAllUserAssetsByDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetAllUserAssetsByDeviceIdResponse, error) {
	rsp, err := c.GetAllUserAssetsByDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUserAssetsByDeviceIdResponse(rsp)
}

// CheckExistingAssetsWithBodyWithResponse request with arbitrary body returning *CheckExistingAssetsResponse
func (c *ClientWithResponses) CheckExistingAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error) {
	rsp, err := c.CheckExistingAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckExistingAssetsResponse(rsp)
}

func (c *ClientWithResponses) CheckExistingAssetsWithResponse(ctx context.Context, body CheckExistingAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckExistingAssetsResponse, error) {
	rsp, err := c.CheckExistingAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckExistingAssetsResponse(rsp)
}

// ServeFileWithResponse request returning *ServeFileResponse
func (c *ClientWithResponses) ServeFileWithResponse(ctx context.Context, id openapi_types.UUID, params *ServeFileParams, reqEditors ...RequestEditorFn) (*ServeFileResponse, error) {
	rsp, err := c.ServeFile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServeFileResponse(rsp)
}

// RunAssetJobsWithBodyWithResponse request with arbitrary body returning *RunAssetJobsResponse
func (c *ClientWithResponses) RunAssetJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error) {
	rsp, err := c.RunAssetJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunAssetJobsResponse(rsp)
}

func (c *ClientWithResponses) RunAssetJobsWithResponse(ctx context.Context, body RunAssetJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*RunAssetJobsResponse, error) {
	rsp, err := c.RunAssetJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunAssetJobsResponse(rsp)
}

// GetMapMarkersWithResponse request returning *GetMapMarkersResponse
func (c *ClientWithResponses) GetMapMarkersWithResponse(ctx context.Context, params *GetMapMarkersParams, reqEditors ...RequestEditorFn) (*GetMapMarkersResponse, error) {
	rsp, err := c.GetMapMarkers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMarkersResponse(rsp)
}

// GetMemoryLaneWithResponse request returning *GetMemoryLaneResponse
func (c *ClientWithResponses) GetMemoryLaneWithResponse(ctx context.Context, params *GetMemoryLaneParams, reqEditors ...RequestEditorFn) (*GetMemoryLaneResponse, error) {
	rsp, err := c.GetMemoryLane(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemoryLaneResponse(rsp)
}

// GetRandomWithResponse request returning *GetRandomResponse
func (c *ClientWithResponses) GetRandomWithResponse(ctx context.Context, params *GetRandomParams, reqEditors ...RequestEditorFn) (*GetRandomResponse, error) {
	rsp, err := c.GetRandom(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomResponse(rsp)
}

// UpdateStackParentWithBodyWithResponse request with arbitrary body returning *UpdateStackParentResponse
func (c *ClientWithResponses) UpdateStackParentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStackParentResponse, error) {
	rsp, err := c.UpdateStackParentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStackParentResponse(rsp)
}

func (c *ClientWithResponses) UpdateStackParentWithResponse(ctx context.Context, body UpdateStackParentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStackParentResponse, error) {
	rsp, err := c.UpdateStackParent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStackParentResponse(rsp)
}

// GetAssetStatisticsWithResponse request returning *GetAssetStatisticsResponse
func (c *ClientWithResponses) GetAssetStatisticsWithResponse(ctx context.Context, params *GetAssetStatisticsParams, reqEditors ...RequestEditorFn) (*GetAssetStatisticsResponse, error) {
	rsp, err := c.GetAssetStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetStatisticsResponse(rsp)
}

// GetAssetThumbnailWithResponse request returning *GetAssetThumbnailResponse
func (c *ClientWithResponses) GetAssetThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetThumbnailParams, reqEditors ...RequestEditorFn) (*GetAssetThumbnailResponse, error) {
	rsp, err := c.GetAssetThumbnail(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetThumbnailResponse(rsp)
}

// UploadFileWithBodyWithResponse request with arbitrary body returning *UploadFileResponse
func (c *ClientWithResponses) UploadFileWithBodyWithResponse(ctx context.Context, params *UploadFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error) {
	rsp, err := c.UploadFileWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileResponse(rsp)
}

// GetAssetInfoWithResponse request returning *GetAssetInfoResponse
func (c *ClientWithResponses) GetAssetInfoWithResponse(ctx context.Context, id openapi_types.UUID, params *GetAssetInfoParams, reqEditors ...RequestEditorFn) (*GetAssetInfoResponse, error) {
	rsp, err := c.GetAssetInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetInfoResponse(rsp)
}

// UpdateAssetWithBodyWithResponse request with arbitrary body returning *UpdateAssetResponse
func (c *ClientWithResponses) UpdateAssetWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAssetWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

func (c *ClientWithResponses) UpdateAssetWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAsset(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

// GetAuditDeletesWithResponse request returning *GetAuditDeletesResponse
func (c *ClientWithResponses) GetAuditDeletesWithResponse(ctx context.Context, params *GetAuditDeletesParams, reqEditors ...RequestEditorFn) (*GetAuditDeletesResponse, error) {
	rsp, err := c.GetAuditDeletes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditDeletesResponse(rsp)
}

// SignUpAdminWithBodyWithResponse request with arbitrary body returning *SignUpAdminResponse
func (c *ClientWithResponses) SignUpAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error) {
	rsp, err := c.SignUpAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignUpAdminResponse(rsp)
}

func (c *ClientWithResponses) SignUpAdminWithResponse(ctx context.Context, body SignUpAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*SignUpAdminResponse, error) {
	rsp, err := c.SignUpAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignUpAdminResponse(rsp)
}

// ChangePasswordWithBodyWithResponse request with arbitrary body returning *ChangePasswordResponse
func (c *ClientWithResponses) ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// ValidateAccessTokenWithResponse request returning *ValidateAccessTokenResponse
func (c *ClientWithResponses) ValidateAccessTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateAccessTokenResponse, error) {
	rsp, err := c.ValidateAccessToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateAccessTokenResponse(rsp)
}

// DownloadArchiveWithBodyWithResponse request with arbitrary body returning *DownloadArchiveResponse
func (c *ClientWithResponses) DownloadArchiveWithBodyWithResponse(ctx context.Context, params *DownloadArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error) {
	rsp, err := c.DownloadArchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadArchiveResponse(rsp)
}

func (c *ClientWithResponses) DownloadArchiveWithResponse(ctx context.Context, params *DownloadArchiveParams, body DownloadArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadArchiveResponse, error) {
	rsp, err := c.DownloadArchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadArchiveResponse(rsp)
}

// DownloadFileWithResponse request returning *DownloadFileResponse
func (c *ClientWithResponses) DownloadFileWithResponse(ctx context.Context, id openapi_types.UUID, params *DownloadFileParams, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error) {
	rsp, err := c.DownloadFile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadFileResponse(rsp)
}

// GetDownloadInfoWithBodyWithResponse request with arbitrary body returning *GetDownloadInfoResponse
func (c *ClientWithResponses) GetDownloadInfoWithBodyWithResponse(ctx context.Context, params *GetDownloadInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error) {
	rsp, err := c.GetDownloadInfoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadInfoResponse(rsp)
}

func (c *ClientWithResponses) GetDownloadInfoWithResponse(ctx context.Context, params *GetDownloadInfoParams, body GetDownloadInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDownloadInfoResponse, error) {
	rsp, err := c.GetDownloadInfo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadInfoResponse(rsp)
}

// GetFacesWithResponse request returning *GetFacesResponse
func (c *ClientWithResponses) GetFacesWithResponse(ctx context.Context, params *GetFacesParams, reqEditors ...RequestEditorFn) (*GetFacesResponse, error) {
	rsp, err := c.GetFaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFacesResponse(rsp)
}

// ReassignFacesByIdWithBodyWithResponse request with arbitrary body returning *ReassignFacesByIdResponse
func (c *ClientWithResponses) ReassignFacesByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error) {
	rsp, err := c.ReassignFacesByIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesByIdResponse(rsp)
}

func (c *ClientWithResponses) ReassignFacesByIdWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesByIdResponse, error) {
	rsp, err := c.ReassignFacesById(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesByIdResponse(rsp)
}

// GetAllJobsStatusWithResponse request returning *GetAllJobsStatusResponse
func (c *ClientWithResponses) GetAllJobsStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllJobsStatusResponse, error) {
	rsp, err := c.GetAllJobsStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllJobsStatusResponse(rsp)
}

// SendJobCommandWithBodyWithResponse request with arbitrary body returning *SendJobCommandResponse
func (c *ClientWithResponses) SendJobCommandWithBodyWithResponse(ctx context.Context, id JobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error) {
	rsp, err := c.SendJobCommandWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobCommandResponse(rsp)
}

func (c *ClientWithResponses) SendJobCommandWithResponse(ctx context.Context, id JobName, body SendJobCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*SendJobCommandResponse, error) {
	rsp, err := c.SendJobCommand(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendJobCommandResponse(rsp)
}

// GetAllLibrariesWithResponse request returning *GetAllLibrariesResponse
func (c *ClientWithResponses) GetAllLibrariesWithResponse(ctx context.Context, params *GetAllLibrariesParams, reqEditors ...RequestEditorFn) (*GetAllLibrariesResponse, error) {
	rsp, err := c.GetAllLibraries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLibrariesResponse(rsp)
}

// CreateLibraryWithBodyWithResponse request with arbitrary body returning *CreateLibraryResponse
func (c *ClientWithResponses) CreateLibraryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error) {
	rsp, err := c.CreateLibraryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLibraryResponse(rsp)
}

func (c *ClientWithResponses) CreateLibraryWithResponse(ctx context.Context, body CreateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLibraryResponse, error) {
	rsp, err := c.CreateLibrary(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLibraryResponse(rsp)
}

// DeleteLibraryWithResponse request returning *DeleteLibraryResponse
func (c *ClientWithResponses) DeleteLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLibraryResponse, error) {
	rsp, err := c.DeleteLibrary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLibraryResponse(rsp)
}

// GetLibraryWithResponse request returning *GetLibraryResponse
func (c *ClientWithResponses) GetLibraryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error) {
	rsp, err := c.GetLibrary(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryResponse(rsp)
}

// UpdateLibraryWithBodyWithResponse request with arbitrary body returning *UpdateLibraryResponse
func (c *ClientWithResponses) UpdateLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error) {
	rsp, err := c.UpdateLibraryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLibraryResponse(rsp)
}

func (c *ClientWithResponses) UpdateLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLibraryResponse, error) {
	rsp, err := c.UpdateLibrary(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLibraryResponse(rsp)
}

// RemoveOfflineFilesWithResponse request returning *RemoveOfflineFilesResponse
func (c *ClientWithResponses) RemoveOfflineFilesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveOfflineFilesResponse, error) {
	rsp, err := c.RemoveOfflineFiles(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveOfflineFilesResponse(rsp)
}

// ScanLibraryWithBodyWithResponse request with arbitrary body returning *ScanLibraryResponse
func (c *ClientWithResponses) ScanLibraryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error) {
	rsp, err := c.ScanLibraryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanLibraryResponse(rsp)
}

func (c *ClientWithResponses) ScanLibraryWithResponse(ctx context.Context, id openapi_types.UUID, body ScanLibraryJSONRequestBody, reqEditors ...RequestEditorFn) (*ScanLibraryResponse, error) {
	rsp, err := c.ScanLibrary(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanLibraryResponse(rsp)
}

// GetLibraryStatisticsWithResponse request returning *GetLibraryStatisticsResponse
func (c *ClientWithResponses) GetLibraryStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLibraryStatisticsResponse, error) {
	rsp, err := c.GetLibraryStatistics(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryStatisticsResponse(rsp)
}

// ValidateWithBodyWithResponse request with arbitrary body returning *ValidateResponse
func (c *ClientWithResponses) ValidateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.ValidateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

func (c *ClientWithResponses) ValidateWithResponse(ctx context.Context, id openapi_types.UUID, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.Validate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

// SearchMemoriesWithResponse request returning *SearchMemoriesResponse
func (c *ClientWithResponses) SearchMemoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchMemoriesResponse, error) {
	rsp, err := c.SearchMemories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMemoriesResponse(rsp)
}

// CreateMemoryWithBodyWithResponse request with arbitrary body returning *CreateMemoryResponse
func (c *ClientWithResponses) CreateMemoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error) {
	rsp, err := c.CreateMemoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoryResponse(rsp)
}

func (c *ClientWithResponses) CreateMemoryWithResponse(ctx context.Context, body CreateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMemoryResponse, error) {
	rsp, err := c.CreateMemory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMemoryResponse(rsp)
}

// DeleteMemoryWithResponse request returning *DeleteMemoryResponse
func (c *ClientWithResponses) DeleteMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMemoryResponse, error) {
	rsp, err := c.DeleteMemory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemoryResponse(rsp)
}

// GetMemoryWithResponse request returning *GetMemoryResponse
func (c *ClientWithResponses) GetMemoryWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMemoryResponse, error) {
	rsp, err := c.GetMemory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMemoryResponse(rsp)
}

// UpdateMemoryWithBodyWithResponse request with arbitrary body returning *UpdateMemoryResponse
func (c *ClientWithResponses) UpdateMemoryWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error) {
	rsp, err := c.UpdateMemoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateMemoryWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateMemoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemoryResponse, error) {
	rsp, err := c.UpdateMemory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemoryResponse(rsp)
}

// RemoveMemoryAssetsWithBodyWithResponse request with arbitrary body returning *RemoveMemoryAssetsResponse
func (c *ClientWithResponses) RemoveMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error) {
	rsp, err := c.RemoveMemoryAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemoryAssetsResponse(rsp)
}

func (c *ClientWithResponses) RemoveMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body RemoveMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMemoryAssetsResponse, error) {
	rsp, err := c.RemoveMemoryAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemoryAssetsResponse(rsp)
}

// AddMemoryAssetsWithBodyWithResponse request with arbitrary body returning *AddMemoryAssetsResponse
func (c *ClientWithResponses) AddMemoryAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error) {
	rsp, err := c.AddMemoryAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemoryAssetsResponse(rsp)
}

func (c *ClientWithResponses) AddMemoryAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body AddMemoryAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemoryAssetsResponse, error) {
	rsp, err := c.AddMemoryAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemoryAssetsResponse(rsp)
}

// StartOAuthWithBodyWithResponse request with arbitrary body returning *StartOAuthResponse
func (c *ClientWithResponses) StartOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error) {
	rsp, err := c.StartOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOAuthResponse(rsp)
}

func (c *ClientWithResponses) StartOAuthWithResponse(ctx context.Context, body StartOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*StartOAuthResponse, error) {
	rsp, err := c.StartOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOAuthResponse(rsp)
}

// FinishOAuthWithBodyWithResponse request with arbitrary body returning *FinishOAuthResponse
func (c *ClientWithResponses) FinishOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error) {
	rsp, err := c.FinishOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishOAuthResponse(rsp)
}

func (c *ClientWithResponses) FinishOAuthWithResponse(ctx context.Context, body FinishOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishOAuthResponse, error) {
	rsp, err := c.FinishOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishOAuthResponse(rsp)
}

// LinkOAuthAccountWithBodyWithResponse request with arbitrary body returning *LinkOAuthAccountResponse
func (c *ClientWithResponses) LinkOAuthAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error) {
	rsp, err := c.LinkOAuthAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkOAuthAccountResponse(rsp)
}

func (c *ClientWithResponses) LinkOAuthAccountWithResponse(ctx context.Context, body LinkOAuthAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*LinkOAuthAccountResponse, error) {
	rsp, err := c.LinkOAuthAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkOAuthAccountResponse(rsp)
}

// RedirectOAuthToMobileWithResponse request returning *RedirectOAuthToMobileResponse
func (c *ClientWithResponses) RedirectOAuthToMobileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RedirectOAuthToMobileResponse, error) {
	rsp, err := c.RedirectOAuthToMobile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedirectOAuthToMobileResponse(rsp)
}

// UnlinkOAuthAccountWithResponse request returning *UnlinkOAuthAccountResponse
func (c *ClientWithResponses) UnlinkOAuthAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UnlinkOAuthAccountResponse, error) {
	rsp, err := c.UnlinkOAuthAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkOAuthAccountResponse(rsp)
}

// GetPartnersWithResponse request returning *GetPartnersResponse
func (c *ClientWithResponses) GetPartnersWithResponse(ctx context.Context, params *GetPartnersParams, reqEditors ...RequestEditorFn) (*GetPartnersResponse, error) {
	rsp, err := c.GetPartners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnersResponse(rsp)
}

// RemovePartnerWithResponse request returning *RemovePartnerResponse
func (c *ClientWithResponses) RemovePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemovePartnerResponse, error) {
	rsp, err := c.RemovePartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovePartnerResponse(rsp)
}

// CreatePartnerWithResponse request returning *CreatePartnerResponse
func (c *ClientWithResponses) CreatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*CreatePartnerResponse, error) {
	rsp, err := c.CreatePartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePartnerResponse(rsp)
}

// UpdatePartnerWithBodyWithResponse request with arbitrary body returning *UpdatePartnerResponse
func (c *ClientWithResponses) UpdatePartnerWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error) {
	rsp, err := c.UpdatePartnerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerResponse(rsp)
}

func (c *ClientWithResponses) UpdatePartnerWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartnerResponse, error) {
	rsp, err := c.UpdatePartner(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartnerResponse(rsp)
}

// GetAllPeopleWithResponse request returning *GetAllPeopleResponse
func (c *ClientWithResponses) GetAllPeopleWithResponse(ctx context.Context, params *GetAllPeopleParams, reqEditors ...RequestEditorFn) (*GetAllPeopleResponse, error) {
	rsp, err := c.GetAllPeople(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPeopleResponse(rsp)
}

// CreatePersonWithBodyWithResponse request with arbitrary body returning *CreatePersonResponse
func (c *ClientWithResponses) CreatePersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error) {
	rsp, err := c.CreatePersonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersonResponse(rsp)
}

func (c *ClientWithResponses) CreatePersonWithResponse(ctx context.Context, body CreatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersonResponse, error) {
	rsp, err := c.CreatePerson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersonResponse(rsp)
}

// UpdatePeopleWithBodyWithResponse request with arbitrary body returning *UpdatePeopleResponse
func (c *ClientWithResponses) UpdatePeopleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error) {
	rsp, err := c.UpdatePeopleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePeopleResponse(rsp)
}

func (c *ClientWithResponses) UpdatePeopleWithResponse(ctx context.Context, body UpdatePeopleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePeopleResponse, error) {
	rsp, err := c.UpdatePeople(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePeopleResponse(rsp)
}

// GetPersonWithResponse request returning *GetPersonResponse
func (c *ClientWithResponses) GetPersonWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonResponse, error) {
	rsp, err := c.GetPerson(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonResponse(rsp)
}

// UpdatePersonWithBodyWithResponse request with arbitrary body returning *UpdatePersonResponse
func (c *ClientWithResponses) UpdatePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error) {
	rsp, err := c.UpdatePersonWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePersonResponse(rsp)
}

func (c *ClientWithResponses) UpdatePersonWithResponse(ctx context.Context, id openapi_types.UUID, body UpdatePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePersonResponse, error) {
	rsp, err := c.UpdatePerson(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePersonResponse(rsp)
}

// GetPersonAssetsWithResponse request returning *GetPersonAssetsResponse
func (c *ClientWithResponses) GetPersonAssetsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonAssetsResponse, error) {
	rsp, err := c.GetPersonAssets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonAssetsResponse(rsp)
}

// MergePersonWithBodyWithResponse request with arbitrary body returning *MergePersonResponse
func (c *ClientWithResponses) MergePersonWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MergePersonResponse, error) {
	rsp, err := c.MergePersonWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergePersonResponse(rsp)
}

func (c *ClientWithResponses) MergePersonWithResponse(ctx context.Context, id openapi_types.UUID, body MergePersonJSONRequestBody, reqEditors ...RequestEditorFn) (*MergePersonResponse, error) {
	rsp, err := c.MergePerson(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMergePersonResponse(rsp)
}

// ReassignFacesWithBodyWithResponse request with arbitrary body returning *ReassignFacesResponse
func (c *ClientWithResponses) ReassignFacesWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error) {
	rsp, err := c.ReassignFacesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesResponse(rsp)
}

func (c *ClientWithResponses) ReassignFacesWithResponse(ctx context.Context, id openapi_types.UUID, body ReassignFacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReassignFacesResponse, error) {
	rsp, err := c.ReassignFaces(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReassignFacesResponse(rsp)
}

// GetPersonStatisticsWithResponse request returning *GetPersonStatisticsResponse
func (c *ClientWithResponses) GetPersonStatisticsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonStatisticsResponse, error) {
	rsp, err := c.GetPersonStatistics(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonStatisticsResponse(rsp)
}

// GetPersonThumbnailWithResponse request returning *GetPersonThumbnailResponse
func (c *ClientWithResponses) GetPersonThumbnailWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPersonThumbnailResponse, error) {
	rsp, err := c.GetPersonThumbnail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonThumbnailResponse(rsp)
}

// GetAuditFilesWithResponse request returning *GetAuditFilesResponse
func (c *ClientWithResponses) GetAuditFilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditFilesResponse, error) {
	rsp, err := c.GetAuditFiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditFilesResponse(rsp)
}

// GetFileChecksumsWithBodyWithResponse request with arbitrary body returning *GetFileChecksumsResponse
func (c *ClientWithResponses) GetFileChecksumsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFileChecksumsResponse, error) {
	rsp, err := c.GetFileChecksumsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileChecksumsResponse(rsp)
}

func (c *ClientWithResponses) GetFileChecksumsWithResponse(ctx context.Context, body GetFileChecksumsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFileChecksumsResponse, error) {
	rsp, err := c.GetFileChecksums(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileChecksumsResponse(rsp)
}

// FixAuditFilesWithBodyWithResponse request with arbitrary body returning *FixAuditFilesResponse
func (c *ClientWithResponses) FixAuditFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FixAuditFilesResponse, error) {
	rsp, err := c.FixAuditFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFixAuditFilesResponse(rsp)
}

func (c *ClientWithResponses) FixAuditFilesWithResponse(ctx context.Context, body FixAuditFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*FixAuditFilesResponse, error) {
	rsp, err := c.FixAuditFiles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFixAuditFilesResponse(rsp)
}

// GetAssetsByCityWithResponse request returning *GetAssetsByCityResponse
func (c *ClientWithResponses) GetAssetsByCityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAssetsByCityResponse, error) {
	rsp, err := c.GetAssetsByCity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsByCityResponse(rsp)
}

// GetExploreDataWithResponse request returning *GetExploreDataResponse
func (c *ClientWithResponses) GetExploreDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExploreDataResponse, error) {
	rsp, err := c.GetExploreData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExploreDataResponse(rsp)
}

// SearchMetadataWithBodyWithResponse request with arbitrary body returning *SearchMetadataResponse
func (c *ClientWithResponses) SearchMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchMetadataResponse, error) {
	rsp, err := c.SearchMetadataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMetadataResponse(rsp)
}

func (c *ClientWithResponses) SearchMetadataWithResponse(ctx context.Context, body SearchMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchMetadataResponse, error) {
	rsp, err := c.SearchMetadata(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMetadataResponse(rsp)
}

// SearchPersonWithResponse request returning *SearchPersonResponse
func (c *ClientWithResponses) SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error) {
	rsp, err := c.SearchPerson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPersonResponse(rsp)
}

// SearchPlacesWithResponse request returning *SearchPlacesResponse
func (c *ClientWithResponses) SearchPlacesWithResponse(ctx context.Context, params *SearchPlacesParams, reqEditors ...RequestEditorFn) (*SearchPlacesResponse, error) {
	rsp, err := c.SearchPlaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPlacesResponse(rsp)
}

// SearchSmartWithBodyWithResponse request with arbitrary body returning *SearchSmartResponse
func (c *ClientWithResponses) SearchSmartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error) {
	rsp, err := c.SearchSmartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSmartResponse(rsp)
}

func (c *ClientWithResponses) SearchSmartWithResponse(ctx context.Context, body SearchSmartJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSmartResponse, error) {
	rsp, err := c.SearchSmart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSmartResponse(rsp)
}

// GetSearchSuggestionsWithResponse request returning *GetSearchSuggestionsResponse
func (c *ClientWithResponses) GetSearchSuggestionsWithResponse(ctx context.Context, params *GetSearchSuggestionsParams, reqEditors ...RequestEditorFn) (*GetSearchSuggestionsResponse, error) {
	rsp, err := c.GetSearchSuggestions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSuggestionsResponse(rsp)
}

// GetServerInfoWithResponse request returning *GetServerInfoResponse
func (c *ClientWithResponses) GetServerInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerInfoResponse, error) {
	rsp, err := c.GetServerInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerInfoResponse(rsp)
}

// GetServerConfigWithResponse request returning *GetServerConfigResponse
func (c *ClientWithResponses) GetServerConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error) {
	rsp, err := c.GetServerConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerConfigResponse(rsp)
}

// GetServerFeaturesWithResponse request returning *GetServerFeaturesResponse
func (c *ClientWithResponses) GetServerFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerFeaturesResponse, error) {
	rsp, err := c.GetServerFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerFeaturesResponse(rsp)
}

// GetSupportedMediaTypesWithResponse request returning *GetSupportedMediaTypesResponse
func (c *ClientWithResponses) GetSupportedMediaTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSupportedMediaTypesResponse, error) {
	rsp, err := c.GetSupportedMediaTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportedMediaTypesResponse(rsp)
}

// PingServerWithResponse request returning *PingServerResponse
func (c *ClientWithResponses) PingServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingServerResponse, error) {
	rsp, err := c.PingServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingServerResponse(rsp)
}

// GetServerStatisticsWithResponse request returning *GetServerStatisticsResponse
func (c *ClientWithResponses) GetServerStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerStatisticsResponse, error) {
	rsp, err := c.GetServerStatistics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerStatisticsResponse(rsp)
}

// GetThemeWithResponse request returning *GetThemeResponse
func (c *ClientWithResponses) GetThemeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetThemeResponse, error) {
	rsp, err := c.GetTheme(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThemeResponse(rsp)
}

// GetServerVersionWithResponse request returning *GetServerVersionResponse
func (c *ClientWithResponses) GetServerVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerVersionResponse, error) {
	rsp, err := c.GetServerVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerVersionResponse(rsp)
}

// DeleteAllSessionsWithResponse request returning *DeleteAllSessionsResponse
func (c *ClientWithResponses) DeleteAllSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllSessionsResponse, error) {
	rsp, err := c.DeleteAllSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllSessionsResponse(rsp)
}

// GetSessionsWithResponse request returning *GetSessionsResponse
func (c *ClientWithResponses) GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error) {
	rsp, err := c.GetSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsResponse(rsp)
}

// DeleteSessionWithResponse request returning *DeleteSessionResponse
func (c *ClientWithResponses) DeleteSessionWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSessionResponse, error) {
	rsp, err := c.DeleteSession(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionResponse(rsp)
}

// GetAllSharedLinksWithResponse request returning *GetAllSharedLinksResponse
func (c *ClientWithResponses) GetAllSharedLinksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllSharedLinksResponse, error) {
	rsp, err := c.GetAllSharedLinks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSharedLinksResponse(rsp)
}

// CreateSharedLinkWithBodyWithResponse request with arbitrary body returning *CreateSharedLinkResponse
func (c *ClientWithResponses) CreateSharedLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error) {
	rsp, err := c.CreateSharedLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharedLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateSharedLinkWithResponse(ctx context.Context, body CreateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSharedLinkResponse, error) {
	rsp, err := c.CreateSharedLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharedLinkResponse(rsp)
}

// GetMySharedLinkWithResponse request returning *GetMySharedLinkResponse
func (c *ClientWithResponses) GetMySharedLinkWithResponse(ctx context.Context, params *GetMySharedLinkParams, reqEditors ...RequestEditorFn) (*GetMySharedLinkResponse, error) {
	rsp, err := c.GetMySharedLink(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMySharedLinkResponse(rsp)
}

// RemoveSharedLinkWithResponse request returning *RemoveSharedLinkResponse
func (c *ClientWithResponses) RemoveSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RemoveSharedLinkResponse, error) {
	rsp, err := c.RemoveSharedLink(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkResponse(rsp)
}

// GetSharedLinkByIdWithResponse request returning *GetSharedLinkByIdResponse
func (c *ClientWithResponses) GetSharedLinkByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSharedLinkByIdResponse, error) {
	rsp, err := c.GetSharedLinkById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedLinkByIdResponse(rsp)
}

// UpdateSharedLinkWithBodyWithResponse request with arbitrary body returning *UpdateSharedLinkResponse
func (c *ClientWithResponses) UpdateSharedLinkWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error) {
	rsp, err := c.UpdateSharedLinkWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSharedLinkResponse(rsp)
}

func (c *ClientWithResponses) UpdateSharedLinkWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateSharedLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSharedLinkResponse, error) {
	rsp, err := c.UpdateSharedLink(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSharedLinkResponse(rsp)
}

// RemoveSharedLinkAssetsWithBodyWithResponse request with arbitrary body returning *RemoveSharedLinkAssetsResponse
func (c *ClientWithResponses) RemoveSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error) {
	rsp, err := c.RemoveSharedLinkAssetsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkAssetsResponse(rsp)
}

func (c *ClientWithResponses) RemoveSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *RemoveSharedLinkAssetsParams, body RemoveSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveSharedLinkAssetsResponse, error) {
	rsp, err := c.RemoveSharedLinkAssets(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSharedLinkAssetsResponse(rsp)
}

// AddSharedLinkAssetsWithBodyWithResponse request with arbitrary body returning *AddSharedLinkAssetsResponse
func (c *ClientWithResponses) AddSharedLinkAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error) {
	rsp, err := c.AddSharedLinkAssetsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSharedLinkAssetsResponse(rsp)
}

func (c *ClientWithResponses) AddSharedLinkAssetsWithResponse(ctx context.Context, id openapi_types.UUID, params *AddSharedLinkAssetsParams, body AddSharedLinkAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSharedLinkAssetsResponse, error) {
	rsp, err := c.AddSharedLinkAssets(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSharedLinkAssetsResponse(rsp)
}

// GetDeltaSyncWithBodyWithResponse request with arbitrary body returning *GetDeltaSyncResponse
func (c *ClientWithResponses) GetDeltaSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error) {
	rsp, err := c.GetDeltaSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaSyncResponse(rsp)
}

func (c *ClientWithResponses) GetDeltaSyncWithResponse(ctx context.Context, body GetDeltaSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDeltaSyncResponse, error) {
	rsp, err := c.GetDeltaSync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeltaSyncResponse(rsp)
}

// GetFullSyncForUserWithBodyWithResponse request with arbitrary body returning *GetFullSyncForUserResponse
func (c *ClientWithResponses) GetFullSyncForUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error) {
	rsp, err := c.GetFullSyncForUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFullSyncForUserResponse(rsp)
}

func (c *ClientWithResponses) GetFullSyncForUserWithResponse(ctx context.Context, body GetFullSyncForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFullSyncForUserResponse, error) {
	rsp, err := c.GetFullSyncForUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFullSyncForUserResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// UpdateConfigWithBodyWithResponse request with arbitrary body returning *UpdateConfigResponse
func (c *ClientWithResponses) UpdateConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateConfigWithResponse(ctx context.Context, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

// GetConfigDefaultsWithResponse request returning *GetConfigDefaultsResponse
func (c *ClientWithResponses) GetConfigDefaultsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigDefaultsResponse, error) {
	rsp, err := c.GetConfigDefaults(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigDefaultsResponse(rsp)
}

// GetMapStyleWithResponse request returning *GetMapStyleResponse
func (c *ClientWithResponses) GetMapStyleWithResponse(ctx context.Context, params *GetMapStyleParams, reqEditors ...RequestEditorFn) (*GetMapStyleResponse, error) {
	rsp, err := c.GetMapStyle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapStyleResponse(rsp)
}

// GetStorageTemplateOptionsWithResponse request returning *GetStorageTemplateOptionsResponse
func (c *ClientWithResponses) GetStorageTemplateOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageTemplateOptionsResponse, error) {
	rsp, err := c.GetStorageTemplateOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageTemplateOptionsResponse(rsp)
}

// GetAdminOnboardingWithResponse request returning *GetAdminOnboardingResponse
func (c *ClientWithResponses) GetAdminOnboardingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminOnboardingResponse, error) {
	rsp, err := c.GetAdminOnboarding(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminOnboardingResponse(rsp)
}

// UpdateAdminOnboardingWithBodyWithResponse request with arbitrary body returning *UpdateAdminOnboardingResponse
func (c *ClientWithResponses) UpdateAdminOnboardingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error) {
	rsp, err := c.UpdateAdminOnboardingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminOnboardingResponse(rsp)
}

func (c *ClientWithResponses) UpdateAdminOnboardingWithResponse(ctx context.Context, body UpdateAdminOnboardingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdminOnboardingResponse, error) {
	rsp, err := c.UpdateAdminOnboarding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdminOnboardingResponse(rsp)
}

// GetReverseGeocodingStateWithResponse request returning *GetReverseGeocodingStateResponse
func (c *ClientWithResponses) GetReverseGeocodingStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReverseGeocodingStateResponse, error) {
	rsp, err := c.GetReverseGeocodingState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReverseGeocodingStateResponse(rsp)
}

// GetAllTagsWithResponse request returning *GetAllTagsResponse
func (c *ClientWithResponses) GetAllTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTagsResponse, error) {
	rsp, err := c.GetAllTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagByIdWithResponse request returning *GetTagByIdResponse
func (c *ClientWithResponses) GetTagByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error) {
	rsp, err := c.GetTagById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagByIdResponse(rsp)
}

// UpdateTagWithBodyWithResponse request with arbitrary body returning *UpdateTagResponse
func (c *ClientWithResponses) UpdateTagWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTagWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTag(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

// UntagAssetsWithBodyWithResponse request with arbitrary body returning *UntagAssetsResponse
func (c *ClientWithResponses) UntagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error) {
	rsp, err := c.UntagAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUntagAssetsResponse(rsp)
}

func (c *ClientWithResponses) UntagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body UntagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UntagAssetsResponse, error) {
	rsp, err := c.UntagAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUntagAssetsResponse(rsp)
}

// GetTagAssetsWithResponse request returning *GetTagAssetsResponse
func (c *ClientWithResponses) GetTagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagAssetsResponse, error) {
	rsp, err := c.GetTagAssets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagAssetsResponse(rsp)
}

// TagAssetsWithBodyWithResponse request with arbitrary body returning *TagAssetsResponse
func (c *ClientWithResponses) TagAssetsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error) {
	rsp, err := c.TagAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagAssetsResponse(rsp)
}

func (c *ClientWithResponses) TagAssetsWithResponse(ctx context.Context, id openapi_types.UUID, body TagAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*TagAssetsResponse, error) {
	rsp, err := c.TagAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTagAssetsResponse(rsp)
}

// GetTimeBucketWithResponse request returning *GetTimeBucketResponse
func (c *ClientWithResponses) GetTimeBucketWithResponse(ctx context.Context, params *GetTimeBucketParams, reqEditors ...RequestEditorFn) (*GetTimeBucketResponse, error) {
	rsp, err := c.GetTimeBucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeBucketResponse(rsp)
}

// GetTimeBucketsWithResponse request returning *GetTimeBucketsResponse
func (c *ClientWithResponses) GetTimeBucketsWithResponse(ctx context.Context, params *GetTimeBucketsParams, reqEditors ...RequestEditorFn) (*GetTimeBucketsResponse, error) {
	rsp, err := c.GetTimeBuckets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeBucketsResponse(rsp)
}

// EmptyTrashWithResponse request returning *EmptyTrashResponse
func (c *ClientWithResponses) EmptyTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*EmptyTrashResponse, error) {
	rsp, err := c.EmptyTrash(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmptyTrashResponse(rsp)
}

// RestoreTrashWithResponse request returning *RestoreTrashResponse
func (c *ClientWithResponses) RestoreTrashWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestoreTrashResponse, error) {
	rsp, err := c.RestoreTrash(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreTrashResponse(rsp)
}

// RestoreAssetsWithBodyWithResponse request with arbitrary body returning *RestoreAssetsResponse
func (c *ClientWithResponses) RestoreAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error) {
	rsp, err := c.RestoreAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreAssetsResponse(rsp)
}

func (c *ClientWithResponses) RestoreAssetsWithResponse(ctx context.Context, body RestoreAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreAssetsResponse, error) {
	rsp, err := c.RestoreAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreAssetsResponse(rsp)
}

// GetAllUsersWithResponse request returning *GetAllUsersResponse
func (c *ClientWithResponses) GetAllUsersWithResponse(ctx context.Context, params *GetAllUsersParams, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error) {
	rsp, err := c.GetAllUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// GetUserByIdWithResponse request returning *GetUserByIdResponse
func (c *ClientWithResponses) GetUserByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserByIdResponse, error) {
	rsp, err := c.GetUserById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByIdResponse(rsp)
}

// GetMyUserInfoWithResponse request returning *GetMyUserInfoResponse
func (c *ClientWithResponses) GetMyUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyUserInfoResponse, error) {
	rsp, err := c.GetMyUserInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyUserInfoResponse(rsp)
}

// DeleteProfileImageWithResponse request returning *DeleteProfileImageResponse
func (c *ClientWithResponses) DeleteProfileImageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error) {
	rsp, err := c.DeleteProfileImage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProfileImageResponse(rsp)
}

// CreateProfileImageWithBodyWithResponse request with arbitrary body returning *CreateProfileImageResponse
func (c *ClientWithResponses) CreateProfileImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProfileImageResponse, error) {
	rsp, err := c.CreateProfileImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProfileImageResponse(rsp)
}

// GetProfileImageWithResponse request returning *GetProfileImageResponse
func (c *ClientWithResponses) GetProfileImageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProfileImageResponse, error) {
	rsp, err := c.GetProfileImage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileImageResponse(rsp)
}

// DeleteUserWithBodyWithResponse request with arbitrary body returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id openapi_types.UUID, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// RestoreUserWithResponse request returning *RestoreUserResponse
func (c *ClientWithResponses) RestoreUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestoreUserResponse, error) {
	rsp, err := c.RestoreUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreUserResponse(rsp)
}

// ParseGetActivitiesResponse parses an HTTP response from a GetActivitiesWithResponse call
func ParseGetActivitiesResponse(rsp *http.Response) (*GetActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActivityResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateActivityResponse parses an HTTP response from a CreateActivityWithResponse call
func ParseCreateActivityResponse(rsp *http.Response) (*CreateActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ActivityResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetActivityStatisticsResponse parses an HTTP response from a GetActivityStatisticsWithResponse call
func ParseGetActivityStatisticsResponse(rsp *http.Response) (*GetActivityStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivityStatisticsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActivityResponse parses an HTTP response from a DeleteActivityWithResponse call
func ParseDeleteActivityResponse(rsp *http.Response) (*DeleteActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllAlbumsResponse parses an HTTP response from a GetAllAlbumsWithResponse call
func ParseGetAllAlbumsResponse(rsp *http.Response) (*GetAllAlbumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAlbumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlbumResponse parses an HTTP response from a CreateAlbumWithResponse call
func ParseCreateAlbumResponse(rsp *http.Response) (*CreateAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAlbumCountResponse parses an HTTP response from a GetAlbumCountWithResponse call
func ParseGetAlbumCountResponse(rsp *http.Response) (*GetAlbumCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumCountResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlbumResponse parses an HTTP response from a DeleteAlbumWithResponse call
func ParseDeleteAlbumResponse(rsp *http.Response) (*DeleteAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlbumInfoResponse parses an HTTP response from a GetAlbumInfoWithResponse call
func ParseGetAlbumInfoResponse(rsp *http.Response) (*GetAlbumInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlbumInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAlbumInfoResponse parses an HTTP response from a UpdateAlbumInfoWithResponse call
func ParseUpdateAlbumInfoResponse(rsp *http.Response) (*UpdateAlbumInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlbumInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveAssetFromAlbumResponse parses an HTTP response from a RemoveAssetFromAlbumWithResponse call
func ParseRemoveAssetFromAlbumResponse(rsp *http.Response) (*RemoveAssetFromAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAssetFromAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddAssetsToAlbumResponse parses an HTTP response from a AddAssetsToAlbumWithResponse call
func ParseAddAssetsToAlbumResponse(rsp *http.Response) (*AddAssetsToAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAssetsToAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromAlbumResponse parses an HTTP response from a RemoveUserFromAlbumWithResponse call
func ParseRemoveUserFromAlbumResponse(rsp *http.Response) (*RemoveUserFromAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAlbumUserResponse parses an HTTP response from a UpdateAlbumUserWithResponse call
func ParseUpdateAlbumUserResponse(rsp *http.Response) (*UpdateAlbumUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlbumUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddUsersToAlbumResponse parses an HTTP response from a AddUsersToAlbumWithResponse call
func ParseAddUsersToAlbumResponse(rsp *http.Response) (*AddUsersToAlbumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUsersToAlbumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlbumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiKeysResponse parses an HTTP response from a GetApiKeysWithResponse call
func ParseGetApiKeysResponse(rsp *http.Response) (*GetApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyResponse parses an HTTP response from a CreateApiKeyWithResponse call
func ParseCreateApiKeyResponse(rsp *http.Response) (*CreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIKeyCreateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyResponse parses an HTTP response from a DeleteApiKeyWithResponse call
func ParseDeleteApiKeyResponse(rsp *http.Response) (*DeleteApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApiKeyResponse parses an HTTP response from a UpdateApiKeyWithResponse call
func ParseUpdateApiKeyResponse(rsp *http.Response) (*UpdateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIKeyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssetsResponse parses an HTTP response from a DeleteAssetsWithResponse call
func ParseDeleteAssetsResponse(rsp *http.Response) (*DeleteAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllAssetsResponse parses an HTTP response from a GetAllAssetsWithResponse call
func ParseGetAllAssetsResponse(rsp *http.Response) (*GetAllAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAssetsResponse parses an HTTP response from a UpdateAssetsWithResponse call
func ParseUpdateAssetsResponse(rsp *http.Response) (*UpdateAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckBulkUploadResponse parses an HTTP response from a CheckBulkUploadWithResponse call
func ParseCheckBulkUploadResponse(rsp *http.Response) (*CheckBulkUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckBulkUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetBulkUploadCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllUserAssetsByDeviceIdResponse parses an HTTP response from a GetAllUserAssetsByDeviceIdWithResponse call
func ParseGetAllUserAssetsByDeviceIdResponse(rsp *http.Response) (*GetAllUserAssetsByDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUserAssetsByDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckExistingAssetsResponse parses an HTTP response from a CheckExistingAssetsWithResponse call
func ParseCheckExistingAssetsResponse(rsp *http.Response) (*CheckExistingAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckExistingAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckExistingAssetsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServeFileResponse parses an HTTP response from a ServeFileWithResponse call
func ParseServeFileResponse(rsp *http.Response) (*ServeFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServeFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRunAssetJobsResponse parses an HTTP response from a RunAssetJobsWithResponse call
func ParseRunAssetJobsResponse(rsp *http.Response) (*RunAssetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunAssetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMapMarkersResponse parses an HTTP response from a GetMapMarkersWithResponse call
func ParseGetMapMarkersResponse(rsp *http.Response) (*GetMapMarkersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMarkersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MapMarkerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMemoryLaneResponse parses an HTTP response from a GetMemoryLaneWithResponse call
func ParseGetMemoryLaneResponse(rsp *http.Response) (*GetMemoryLaneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemoryLaneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MemoryLaneResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRandomResponse parses an HTTP response from a GetRandomWithResponse call
func ParseGetRandomResponse(rsp *http.Response) (*GetRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateStackParentResponse parses an HTTP response from a UpdateStackParentWithResponse call
func ParseUpdateStackParentResponse(rsp *http.Response) (*UpdateStackParentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStackParentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetStatisticsResponse parses an HTTP response from a GetAssetStatisticsWithResponse call
func ParseGetAssetStatisticsResponse(rsp *http.Response) (*GetAssetStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssetThumbnailResponse parses an HTTP response from a GetAssetThumbnailWithResponse call
func ParseGetAssetThumbnailResponse(rsp *http.Response) (*GetAssetThumbnailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetThumbnailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadFileResponse parses an HTTP response from a UploadFileWithResponse call
func ParseUploadFileResponse(rsp *http.Response) (*UploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AssetFileUploadResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAssetInfoResponse parses an HTTP response from a GetAssetInfoWithResponse call
func ParseGetAssetInfoResponse(rsp *http.Response) (*GetAssetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAssetResponse parses an HTTP response from a UpdateAssetWithResponse call
func ParseUpdateAssetResponse(rsp *http.Response) (*UpdateAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuditDeletesResponse parses an HTTP response from a GetAuditDeletesWithResponse call
func ParseGetAuditDeletesResponse(rsp *http.Response) (*GetAuditDeletesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditDeletesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditDeletesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSignUpAdminResponse parses an HTTP response from a SignUpAdminWithResponse call
func ParseSignUpAdminResponse(rsp *http.Response) (*SignUpAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignUpAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseChangePasswordResponse parses an HTTP response from a ChangePasswordWithResponse call
func ParseChangePasswordResponse(rsp *http.Response) (*ChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoginResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogoutResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateAccessTokenResponse parses an HTTP response from a ValidateAccessTokenWithResponse call
func ParseValidateAccessTokenResponse(rsp *http.Response) (*ValidateAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateAccessTokenResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadArchiveResponse parses an HTTP response from a DownloadArchiveWithResponse call
func ParseDownloadArchiveResponse(rsp *http.Response) (*DownloadArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadFileResponse parses an HTTP response from a DownloadFileWithResponse call
func ParseDownloadFileResponse(rsp *http.Response) (*DownloadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDownloadInfoResponse parses an HTTP response from a GetDownloadInfoWithResponse call
func ParseGetDownloadInfoResponse(rsp *http.Response) (*GetDownloadInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDownloadInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DownloadResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetFacesResponse parses an HTTP response from a GetFacesWithResponse call
func ParseGetFacesResponse(rsp *http.Response) (*GetFacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetFaceResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReassignFacesByIdResponse parses an HTTP response from a ReassignFacesByIdWithResponse call
func ParseReassignFacesByIdResponse(rsp *http.Response) (*ReassignFacesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReassignFacesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllJobsStatusResponse parses an HTTP response from a GetAllJobsStatusWithResponse call
func ParseGetAllJobsStatusResponse(rsp *http.Response) (*GetAllJobsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllJobsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllJobStatusResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendJobCommandResponse parses an HTTP response from a SendJobCommandWithResponse call
func ParseSendJobCommandResponse(rsp *http.Response) (*SendJobCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendJobCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobStatusDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllLibrariesResponse parses an HTTP response from a GetAllLibrariesWithResponse call
func ParseGetAllLibrariesResponse(rsp *http.Response) (*GetAllLibrariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLibrariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLibraryResponse parses an HTTP response from a CreateLibraryWithResponse call
func ParseCreateLibraryResponse(rsp *http.Response) (*CreateLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteLibraryResponse parses an HTTP response from a DeleteLibraryWithResponse call
func ParseDeleteLibraryResponse(rsp *http.Response) (*DeleteLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLibraryResponse parses an HTTP response from a GetLibraryWithResponse call
func ParseGetLibraryResponse(rsp *http.Response) (*GetLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLibraryResponse parses an HTTP response from a UpdateLibraryWithResponse call
func ParseUpdateLibraryResponse(rsp *http.Response) (*UpdateLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveOfflineFilesResponse parses an HTTP response from a RemoveOfflineFilesWithResponse call
func ParseRemoveOfflineFilesResponse(rsp *http.Response) (*RemoveOfflineFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveOfflineFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseScanLibraryResponse parses an HTTP response from a ScanLibraryWithResponse call
func ParseScanLibraryResponse(rsp *http.Response) (*ScanLibraryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScanLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLibraryStatisticsResponse parses an HTTP response from a GetLibraryStatisticsWithResponse call
func ParseGetLibraryStatisticsResponse(rsp *http.Response) (*GetLibraryStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LibraryStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateResponse parses an HTTP response from a ValidateWithResponse call
func ParseValidateResponse(rsp *http.Response) (*ValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateLibraryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchMemoriesResponse parses an HTTP response from a SearchMemoriesWithResponse call
func ParseSearchMemoriesResponse(rsp *http.Response) (*SearchMemoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMemoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMemoryResponse parses an HTTP response from a CreateMemoryWithResponse call
func ParseCreateMemoryResponse(rsp *http.Response) (*CreateMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteMemoryResponse parses an HTTP response from a DeleteMemoryWithResponse call
func ParseDeleteMemoryResponse(rsp *http.Response) (*DeleteMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMemoryResponse parses an HTTP response from a GetMemoryWithResponse call
func ParseGetMemoryResponse(rsp *http.Response) (*GetMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMemoryResponse parses an HTTP response from a UpdateMemoryWithResponse call
func ParseUpdateMemoryResponse(rsp *http.Response) (*UpdateMemoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMemoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemoryResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMemoryAssetsResponse parses an HTTP response from a RemoveMemoryAssetsWithResponse call
func ParseRemoveMemoryAssetsResponse(rsp *http.Response) (*RemoveMemoryAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMemoryAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMemoryAssetsResponse parses an HTTP response from a AddMemoryAssetsWithResponse call
func ParseAddMemoryAssetsResponse(rsp *http.Response) (*AddMemoryAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMemoryAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartOAuthResponse parses an HTTP response from a StartOAuthWithResponse call
func ParseStartOAuthResponse(rsp *http.Response) (*StartOAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OAuthAuthorizeResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFinishOAuthResponse parses an HTTP response from a FinishOAuthWithResponse call
func ParseFinishOAuthResponse(rsp *http.Response) (*FinishOAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinishOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoginResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLinkOAuthAccountResponse parses an HTTP response from a LinkOAuthAccountWithResponse call
func ParseLinkOAuthAccountResponse(rsp *http.Response) (*LinkOAuthAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkOAuthAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRedirectOAuthToMobileResponse parses an HTTP response from a RedirectOAuthToMobileWithResponse call
func ParseRedirectOAuthToMobileResponse(rsp *http.Response) (*RedirectOAuthToMobileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedirectOAuthToMobileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnlinkOAuthAccountResponse parses an HTTP response from a UnlinkOAuthAccountWithResponse call
func ParseUnlinkOAuthAccountResponse(rsp *http.Response) (*UnlinkOAuthAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnlinkOAuthAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPartnersResponse parses an HTTP response from a GetPartnersWithResponse call
func ParseGetPartnersResponse(rsp *http.Response) (*GetPartnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemovePartnerResponse parses an HTTP response from a RemovePartnerWithResponse call
func ParseRemovePartnerResponse(rsp *http.Response) (*RemovePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreatePartnerResponse parses an HTTP response from a CreatePartnerWithResponse call
func ParseCreatePartnerResponse(rsp *http.Response) (*CreatePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePartnerResponse parses an HTTP response from a UpdatePartnerWithResponse call
func ParseUpdatePartnerResponse(rsp *http.Response) (*UpdatePartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PartnerResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllPeopleResponse parses an HTTP response from a GetAllPeopleWithResponse call
func ParseGetAllPeopleResponse(rsp *http.Response) (*GetAllPeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeopleResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePersonResponse parses an HTTP response from a CreatePersonWithResponse call
func ParseCreatePersonResponse(rsp *http.Response) (*CreatePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePeopleResponse parses an HTTP response from a UpdatePeopleWithResponse call
func ParseUpdatePeopleResponse(rsp *http.Response) (*UpdatePeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonResponse parses an HTTP response from a GetPersonWithResponse call
func ParseGetPersonResponse(rsp *http.Response) (*GetPersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePersonResponse parses an HTTP response from a UpdatePersonWithResponse call
func ParseUpdatePersonResponse(rsp *http.Response) (*UpdatePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonAssetsResponse parses an HTTP response from a GetPersonAssetsWithResponse call
func ParseGetPersonAssetsResponse(rsp *http.Response) (*GetPersonAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMergePersonResponse parses an HTTP response from a MergePersonWithResponse call
func ParseMergePersonResponse(rsp *http.Response) (*MergePersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MergePersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []BulkIdResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReassignFacesResponse parses an HTTP response from a ReassignFacesWithResponse call
func ParseReassignFacesResponse(rsp *http.Response) (*ReassignFacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReassignFacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonStatisticsResponse parses an HTTP response from a GetPersonStatisticsWithResponse call
func ParseGetPersonStatisticsResponse(rsp *http.Response) (*GetPersonStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonStatisticsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPersonThumbnailResponse parses an HTTP response from a GetPersonThumbnailWithResponse call
func ParseGetPersonThumbnailResponse(rsp *http.Response) (*GetPersonThumbnailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonThumbnailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuditFilesResponse parses an HTTP response from a GetAuditFilesWithResponse call
func ParseGetAuditFilesResponse(rsp *http.Response) (*GetAuditFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileReportDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFileChecksumsResponse parses an HTTP response from a GetFileChecksumsWithResponse call
func ParseGetFileChecksumsResponse(rsp *http.Response) (*GetFileChecksumsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileChecksumsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []FileChecksumResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFixAuditFilesResponse parses an HTTP response from a FixAuditFilesWithResponse call
func ParseFixAuditFilesResponse(rsp *http.Response) (*FixAuditFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FixAuditFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetsByCityResponse parses an HTTP response from a GetAssetsByCityWithResponse call
func ParseGetAssetsByCityResponse(rsp *http.Response) (*GetAssetsByCityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsByCityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExploreDataResponse parses an HTTP response from a GetExploreDataWithResponse call
func ParseGetExploreDataResponse(rsp *http.Response) (*GetExploreDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExploreDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchExploreResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchMetadataResponse parses an HTTP response from a SearchMetadataWithResponse call
func ParseSearchMetadataResponse(rsp *http.Response) (*SearchMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchPersonResponse parses an HTTP response from a SearchPersonWithResponse call
func ParseSearchPersonResponse(rsp *http.Response) (*SearchPersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchPlacesResponse parses an HTTP response from a SearchPlacesWithResponse call
func ParseSearchPlacesResponse(rsp *http.Response) (*SearchPlacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPlacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PlacesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSmartResponse parses an HTTP response from a SearchSmartWithResponse call
func ParseSearchSmartResponse(rsp *http.Response) (*SearchSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchSuggestionsResponse parses an HTTP response from a GetSearchSuggestionsWithResponse call
func ParseGetSearchSuggestionsResponse(rsp *http.Response) (*GetSearchSuggestionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSuggestionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerInfoResponse parses an HTTP response from a GetServerInfoWithResponse call
func ParseGetServerInfoResponse(rsp *http.Response) (*GetServerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerInfoResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerConfigResponse parses an HTTP response from a GetServerConfigWithResponse call
func ParseGetServerConfigResponse(rsp *http.Response) (*GetServerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerFeaturesResponse parses an HTTP response from a GetServerFeaturesWithResponse call
func ParseGetServerFeaturesResponse(rsp *http.Response) (*GetServerFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerFeaturesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSupportedMediaTypesResponse parses an HTTP response from a GetSupportedMediaTypesWithResponse call
func ParseGetSupportedMediaTypesResponse(rsp *http.Response) (*GetSupportedMediaTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportedMediaTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerMediaTypesResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePingServerResponse parses an HTTP response from a PingServerWithResponse call
func ParsePingServerResponse(rsp *http.Response) (*PingServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerPingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerStatisticsResponse parses an HTTP response from a GetServerStatisticsWithResponse call
func ParseGetServerStatisticsResponse(rsp *http.Response) (*GetServerStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerStatsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetThemeResponse parses an HTTP response from a GetThemeWithResponse call
func ParseGetThemeResponse(rsp *http.Response) (*GetThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerThemeDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServerVersionResponse parses an HTTP response from a GetServerVersionWithResponse call
func ParseGetServerVersionResponse(rsp *http.Response) (*GetServerVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerVersionResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAllSessionsResponse parses an HTTP response from a DeleteAllSessionsWithResponse call
func ParseDeleteAllSessionsResponse(rsp *http.Response) (*DeleteAllSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSessionsResponse parses an HTTP response from a GetSessionsWithResponse call
func ParseGetSessionsResponse(rsp *http.Response) (*GetSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SessionResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSessionResponse parses an HTTP response from a DeleteSessionWithResponse call
func ParseDeleteSessionResponse(rsp *http.Response) (*DeleteSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllSharedLinksResponse parses an HTTP response from a GetAllSharedLinksWithResponse call
func ParseGetAllSharedLinksResponse(rsp *http.Response) (*GetAllSharedLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSharedLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSharedLinkResponse parses an HTTP response from a CreateSharedLinkWithResponse call
func ParseCreateSharedLinkResponse(rsp *http.Response) (*CreateSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMySharedLinkResponse parses an HTTP response from a GetMySharedLinkWithResponse call
func ParseGetMySharedLinkResponse(rsp *http.Response) (*GetMySharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMySharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveSharedLinkResponse parses an HTTP response from a RemoveSharedLinkWithResponse call
func ParseRemoveSharedLinkResponse(rsp *http.Response) (*RemoveSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSharedLinkByIdResponse parses an HTTP response from a GetSharedLinkByIdWithResponse call
func ParseGetSharedLinkByIdResponse(rsp *http.Response) (*GetSharedLinkByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedLinkByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSharedLinkResponse parses an HTTP response from a UpdateSharedLinkWithResponse call
func ParseUpdateSharedLinkResponse(rsp *http.Response) (*UpdateSharedLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSharedLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedLinkResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveSharedLinkAssetsResponse parses an HTTP response from a RemoveSharedLinkAssetsWithResponse call
func ParseRemoveSharedLinkAssetsResponse(rsp *http.Response) (*RemoveSharedLinkAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSharedLinkAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddSharedLinkAssetsResponse parses an HTTP response from a AddSharedLinkAssetsWithResponse call
func ParseAddSharedLinkAssetsResponse(rsp *http.Response) (*AddSharedLinkAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSharedLinkAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeltaSyncResponse parses an HTTP response from a GetDeltaSyncWithResponse call
func ParseGetDeltaSyncResponse(rsp *http.Response) (*GetDeltaSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeltaSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetDeltaSyncResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFullSyncForUserResponse parses an HTTP response from a GetFullSyncForUserWithResponse call
func ParseGetFullSyncForUserResponse(rsp *http.Response) (*GetFullSyncForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFullSyncForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConfigResponse parses an HTTP response from a UpdateConfigWithResponse call
func ParseUpdateConfigResponse(rsp *http.Response) (*UpdateConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigDefaultsResponse parses an HTTP response from a GetConfigDefaultsWithResponse call
func ParseGetConfigDefaultsResponse(rsp *http.Response) (*GetConfigDefaultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigDefaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapStyleResponse parses an HTTP response from a GetMapStyleWithResponse call
func ParseGetMapStyleResponse(rsp *http.Response) (*GetMapStyleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapStyleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageTemplateOptionsResponse parses an HTTP response from a GetStorageTemplateOptionsWithResponse call
func ParseGetStorageTemplateOptionsResponse(rsp *http.Response) (*GetStorageTemplateOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageTemplateOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemConfigTemplateStorageOptionDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminOnboardingResponse parses an HTTP response from a GetAdminOnboardingWithResponse call
func ParseGetAdminOnboardingResponse(rsp *http.Response) (*GetAdminOnboardingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminOnboardingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminOnboardingUpdateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAdminOnboardingResponse parses an HTTP response from a UpdateAdminOnboardingWithResponse call
func ParseUpdateAdminOnboardingResponse(rsp *http.Response) (*UpdateAdminOnboardingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAdminOnboardingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReverseGeocodingStateResponse parses an HTTP response from a GetReverseGeocodingStateWithResponse call
func ParseGetReverseGeocodingStateResponse(rsp *http.Response) (*GetReverseGeocodingStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReverseGeocodingStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReverseGeocodingStateResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllTagsResponse parses an HTTP response from a GetAllTagsWithResponse call
func ParseGetAllTagsResponse(rsp *http.Response) (*GetAllTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagByIdResponse parses an HTTP response from a GetTagByIdWithResponse call
func ParseGetTagByIdResponse(rsp *http.Response) (*GetTagByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTagResponse parses an HTTP response from a UpdateTagWithResponse call
func ParseUpdateTagResponse(rsp *http.Response) (*UpdateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUntagAssetsResponse parses an HTTP response from a UntagAssetsWithResponse call
func ParseUntagAssetsResponse(rsp *http.Response) (*UntagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UntagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagAssetsResponse parses an HTTP response from a GetTagAssetsWithResponse call
func ParseGetTagAssetsResponse(rsp *http.Response) (*GetTagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTagAssetsResponse parses an HTTP response from a TagAssetsWithResponse call
func ParseTagAssetsResponse(rsp *http.Response) (*TagAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TagAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetIdsResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeBucketResponse parses an HTTP response from a GetTimeBucketWithResponse call
func ParseGetTimeBucketResponse(rsp *http.Response) (*GetTimeBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AssetResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeBucketsResponse parses an HTTP response from a GetTimeBucketsWithResponse call
func ParseGetTimeBucketsResponse(rsp *http.Response) (*GetTimeBucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimeBucketResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEmptyTrashResponse parses an HTTP response from a EmptyTrashWithResponse call
func ParseEmptyTrashResponse(rsp *http.Response) (*EmptyTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmptyTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestoreTrashResponse parses an HTTP response from a RestoreTrashWithResponse call
func ParseRestoreTrashResponse(rsp *http.Response) (*RestoreTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestoreAssetsResponse parses an HTTP response from a RestoreAssetsWithResponse call
func ParseRestoreAssetsResponse(rsp *http.Response) (*RestoreAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllUsersResponse parses an HTTP response from a GetAllUsersWithResponse call
func ParseGetAllUsersResponse(rsp *http.Response) (*GetAllUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserByIdResponse parses an HTTP response from a GetUserByIdWithResponse call
func ParseGetUserByIdResponse(rsp *http.Response) (*GetUserByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyUserInfoResponse parses an HTTP response from a GetMyUserInfoWithResponse call
func ParseGetMyUserInfoResponse(rsp *http.Response) (*GetMyUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProfileImageResponse parses an HTTP response from a DeleteProfileImageWithResponse call
func ParseDeleteProfileImageResponse(rsp *http.Response) (*DeleteProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateProfileImageResponse parses an HTTP response from a CreateProfileImageWithResponse call
func ParseCreateProfileImageResponse(rsp *http.Response) (*CreateProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateProfileImageResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProfileImageResponse parses an HTTP response from a GetProfileImageWithResponse call
func ParseGetProfileImageResponse(rsp *http.Response) (*GetProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRestoreUserResponse parses an HTTP response from a RestoreUserWithResponse call
func ParseRestoreUserResponse(rsp *http.Response) (*RestoreUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
